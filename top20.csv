,timestamp,eventType,contentId,authorPersonId,authorSessionId,authorUserAgent,authorRegion,authorCountry,contentType,url,title,text,lang,interactions
0,1487246811,CONTENT SHARED,-4029704725707465084,6013226412048763966,-6569695881431984742,"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36",SP,BR,HTML,http://www.cnbc.com/2016/12/21/former-google-career-coach-shares-a-useful-visual-trick.html,Former Google career coach shares a visual trick for figuring out what to do with your life,"If you want 2017 to be an exciting year, design it that way. That's the advice of former Google career coach and job strategist Jenny Blake , who has helped more than a thousand people improve their work lives. She recommends creating a ""mind map,"" a visual diagram of your interests and goals. Drawing one doesn't take long and could help you figure out the next project, hobby or career change that will make the new year happier and more successful, Blake says. ""My favorite way to brainstorm creatively, whether it's about values or setting goals for the new year, is through mind maps,"" Blake tells CNBC. To make one, write down the year at the center of a piece of paper, and then draw spokes with different themes that are important to you. For example, your spokes could be business, personal life, health and fitness, fun, or skill building. From each of those themes, draw additional spokes to connect the themes to ways you want to improve or experiment in that area. Blake recommends you ask yourself: ""What's important to me about that? And what does success look like?"" For example, in ""personal life,"" you could write, ""Meet up with a friend at least once a month"" or ""Take a music class."" The visual trick works because it helps you see the different ways you can improve, Blake writes in her book "" Pivot: The Only Move That Matters Is Your Next One ."" ""With mind mapping you are taking pen to paper, going old-school,"" Blake says. And if you're like many professionals who sit too much and stare too long at a computer, drawing might actually be fun. ""The goal is to break out of linear thinking,"" Blake says. ""Go broad. Go big. Go sideways, and then experiment to see which of your ideas is most likely to lead to a resonant next step."" Video by Andrea Kramar.",en,433
1,1467813728,CONTENT SHARED,-133139342397538859,4918484843075254252,-5701227433817087697,,,,HTML,http://gq.globo.com/Prazeres/Poder/Carreira/noticia/2016/06/novo-workaholic-trabalha-pratica-esportes-e-tem-tempo-para-familia-conheca.html,"Novo workaholic trabalha, pratica esportes e tem tempo para a família. Conheça","Novo workaholic não abre mão do esporte e da família (Foto: iStock) Se alguém, um dia, precisar reunir os personagens desta reportagem para uma rodada de negócios, fica aqui uma sugestão: marque o encontro na Vila Olímpica. Maratona, triatlo, judô, taekwondo e windsurfe são algumas das modalidades praticadas - em alguns casos com dedicação e resultados semiprofissionais - por este pequeno conjunto de executivos. Mas boa sorte com as agendas. Todos presidem empresas, obviamente com rotinas intensas, e dificilmente permitem que compromissos extracurriculares roubem o tempo sagrado para suas famílias ou, no caso dos solteiros, para os hobbies que fazem brilhar seus olhos. Representantes de uma geração que conviveu com chefes e colegas viciados em trabalho (e em certos momentos se confundiram com eles), esses profissionais fizeram do esporte a pedra angular para a construção de rotinas criativas. Sua dedicação a empresas tão diferentes entre si como P&G, Leo Burnett e Unisys não é avaliada pelo número de horas passadas no escritório, uma obsessão típica dos velhos baby boomers. ""Talvez porque eles não tivessem outros interesses na vida"", afirma Alberto Ogata, diretor técnico da Associação Brasileira de Qualidade de Vida (ABQV). Tampouco é medida pelos símbolos de status corporativo que conspiravam contra a saúde dos executivos, a começar pela vaga de estacionamento próxima ao elevador. Pelas novas regras com as quais eles estão subvertendo o jogo corporativo, o que vale são os resultados entregues e o modo como se dá essa entrega: com equilíbrio e foco invejáveis. É o que permite a altos executivos, em posições de destaque nas companhias que lideram, terem vidas saudáveis, interessantes e, quase sempre, divertidas. É o que faz deles a primeira geração dos chamados novos workaholics. O ponto de partida para essa mudança de paradigma encontra-se no Vale do Silício. O engravatado durão que demitia 10% de seus funcionários todo ano deu lugar ao ex-hippie. E as empresas passaram a trocar horários a cumprir por tarefas a executar Com idades entre 40 e 50 anos, eles estão no auge de suas carreiras, lideram multinacionais e têm vasta experiência internacional. São todos apaixonados pelos esportes que praticam, mas têm uma visão utilitária da atividade física. Em troca da disciplina férrea que tira a maioria deles da cama antes de o sol nascer, esperam benefícios (aplicáveis ao trabalho) como energia, serenidade e capacidade de executar impecavelmente sob pressão. Pragmaticamente, eles estão trocando quantidade por qualidade no trabalho porque entenderam que mais tempo no escritório não significa mais trabalho feito. Um estudo recente da Business Roundtable, uma associação de CEOs de grandes empresas nos EUA, concluiu que embora um pico concentrado de muitas horas de trabalho possa aumentar o rendimento em prazos curtos (fechamentos de trimestre, lançamento de produtos, etc.), longas jornadas sistemáticas tendem a diminuir a produtividade. Os pesquisadores constataram que pessoas trabalhando 60 horas por semana - ou 12 horas por dia - durante dois meses não produziram mais do que num regime tradicional de 40 horas semanais - ou oito horas diárias. Já uma semana de 80 horas provoca burnout em menos de um mês. Há raízes históricas para a transformação em curso. ""No início dos anos 80 tivemos as primeiras manifestações de executivos que se saturaram da busca pelo sucesso, justamente por terem percebido que o custo de alcançá-lo é imenso"", afirma o professor Esdras Vasconcellos, do Departamento de Psicologia Social e do Trabalho da Universidade de São Paulo. ""Naquela época, reduzir o ritmo era mais difícil. Então, alguns abdicaram da carreira executiva."" Ouviam-se casos anedóticos de executivos que largavam tudo para abrir uma pousada no Nordeste. No auge da onda workaholic, eles tiveram o insight que originou o que Vasconcellos chama de ecologia da vida. ""Esse novo pensamento não traz uma abdicação da vida civilizada, moderna, até certo ponto consumista"", pondera. ""Traz, sim, uma leveza simbolizada pela troca do tênis (longas partidas, alta competitividade) pela ioga (meditação, retiros espirituais)."" Geograficamente, o ponto de partida para essa mudança de paradigma encontra-se no Vale do Silício - não por acaso, na Califórnia. Volte aos anos 60. Ali floresceu todo o movimento hippie, toda a contracultura que influenciou São Francisco e região. ""Esses anos revolucionários romperam totalmente com valores antigos"", afirma Vasconcellos. Duas décadas depois, a Califórnia estava no epicentro do surgimento da informática, do computador pessoal como facilitador de processos de trabalho. Placas tectônicas do mundo corporativo se moveram durante o período de ascensão e estrelato de Steve Jobs. Da sua explosão como empreendedor, nos anos 80, à sua assimilação pelo establishment empresarial na primeira década do século 21 - que coincide com o caso de Jack Welch, até então o grande ícone do executivo vencedor e o protótipo do workaholic. O engravatado durão que demitia 10% de seus funcionários todo ano deu lugar ao ex-hippie com grande apetite por LSD, meditação e comida vegana. Era o início de uma revolução cultural. Pragmática. As empresas, ao perceber que a permissão para que as pessoas trabalhem com um pouco mais de leveza acaba trazendo resultados, decidiram relaxar. Trocaram horários a cumprir por tarefas a executar. Os ambientes de trabalho ganharam quadras de esporte, áreas de lazer, restaurantes gourmet. Se workaholic é o profissional que não consegue ou tem grande dificuldade de se desconectar do trabalho, o que importa não é o número de hobbies e atividades esportivas que ele encaixa na rotina. O desafio para esse executivo é o poder de se desligar Esse movimento ganhou impulso com uma mudança na cultura das empresas na década de 90, quando começa a implantação dos programas de qualidade de vida. A geração que estava, então, em início de carreira já recebeu esse novo modelo mental de autogerenciamento nos seus anos de formação. ""Esses executivos têm consciência elevada e tratam a saúde como elemento de sustentabilidade pessoal"", diz Carlos Legal, sócio da consultoria Legalas, especializada em educação corporativa. Parte deles abre mão voluntariamente de posições no topo das organizações. Todavia, há aqueles que querem tudo: chegar ao topo de suas empresas, porém sem sacrificar vida pessoal e vida familiar. Na visão de Vicky Bloch, uma das mais renomadas coachs de CEOs do país, o perfil predominante no topo das companhias brasileiras ainda é o do workaholic clássico. Profissionais atléticos são pontos fora da curva e não um retrato fiel da realidade do Brasil, onde 51% das mulheres e 47% dos homens hoje são sedentários. A obesidade é uma epidemia, sobretudo na base da pirâmide organizacional das empresas. Mas isso está mudando, e rapidamente. ""Estamos em transição"", nota Vicky. A mudança maior está se dando com a entrada no primeiro escalão das empresas de executivos na faixa de 35 a 45 anos. Pessoas que já são associadas ao que ela chama de geração flexível, no que diz respeito à sua relação com o tempo e o espaço em que o trabalho é executado. Gente mais saudável, sem dúvida, mas não necessariamente menos viciada em trabalho, pondera Vicky. Afinal, se workaholic é o sujeito que não consegue se desconectar do trabalho, o que importa não é o número de hobbies e atividades esportivas que ele encaixa na rotina. O desafio é o poder de se desligar. Alguns sintomas típicos do antigo vício em trabalho, é bem verdade, tornam-se mais raros na geração flexível - como os casamentos desfeitos. De acordo com as pesquisas de Bryan Robinson, psicoterapeuta, professor emérito da Universidade da Carolina do Norte e autor do livro Chained to the Desk (""Acorrentado à Mesa"", sem edição em português), casamentos com ao menos um cônjuge workaholic têm 40% mais riscos de acabar em divórcio. Contudo, se a cachaça do workaholic é o trabalho, a dependência, em muitos casos, continua presente. ""Só que hoje ele não trabalha apenas no escritório"", diz Vicky. ""Trabalha em casa, no carro, correndo."" O próximo desafio, então, talvez seja completar a transição desses novos workaholics em autênticos pós-workaholics. A troca da guarda geracional, sem dúvida, está fazendo sua parte. Basta conferir o depoimento de Ricardo Sangion, principal executivo da rede social Pinterest no Brasil. Mais jovem do time aqui reunido, ele se orgulha de dormir muito, trabalhar pouco, entregar resultados e ainda ter tempo para administrar um site, um bar e uma pousada na Bahia. Nem tudo, porém, se resume à idade. Valores antes reprimidos estão sendo integrados à vida executiva. ""A espiritualidade passa a ser importante"", exemplifica o professor Vasconcellos. E há o poderoso efeito demonstração. ""As empresas começam a perceber que até profissionais na posição de CEO já não estão mais disponíveis para alcançar resultados a qualquer preço"", observa o consultor Carlos Legal. Ao dizer que não estão dispostos a fazer qualquer tipo de sacrifício para chegar ao topo, esses profissionais aceleram o processo de mudança no próprio modo de funcionar das organizações.",pt,315
2,1468867647,CONTENT SHARED,-6783772548752091658,4918484843075254252,-8995217520473210153,,,,HTML,http://www.caroli.org/livro-retrospectivas-divertidas/,Livro: Retrospectivas Divertidas,"Neste livro, nós fornecemos um conjunto de ferramentas de atividades para transformar um grupo de pessoas em um time eficaz. Manter a diversão para os participantes e proporcionar um ambiente onde todos poderão refletir e discutir sem perder a diversão é fundamental para a melhoria contínua. Apresentaremos aqui um catálogo de atividades diversas, apropriadas, uma a uma, a diferentes contextos e equipes. Todas equipes devem fazer uma retrospectiva por semana, a menos que estejam sem tempo. Daí devem fazer duas!",pt,294
3,1465484901,CONTENT SHARED,8657408509986329668,-8020832670974472349,838596071610016700,,,,HTML,https://medium.com/practical-blend/pull-request-first-f6bb667a9b6,Pull request first - Practical Blend,"Pull request first After two years of working with pull requests a bit differently from the norm, I now take for granted that most developers submit pull requests only once their work is ""ready"" for review. Obviously... right? Or... not? There's a different approach I'd argue provides more transparency to your team, makes sure everyone is aligned and helps to keep a historical record of what decisions were made when developing a feature. Simply... Open a pull request before you write code.* Wait, what? Rather than treating pull requests solely as means for reviewing code, use the pull request as the master of record for the work related to a feature. This isn't a new idea - this is an approach our product team at bitHound practiced for nearly 2 years, inspired by GitHub itself ( Zach Holman's talk explains it). * And yes, technically GitHub requires at least one commit to open a pull request, so you have to write something first. There are several benefits that we saw from adopting this approach: Increased transparency Your Open Pull Requests view on GitHub becomes an instant snapshot of the current state of dev work in your company. Isn't that what the scrum board is for? Oh, sure it is - and once everyone races to move/write their stickies 30 seconds before standup, you'll get a similar view (for about 5 minutes). Specs as you go By using checkboxes in the pull request description , you can build out the current list of todos, what issues the pull request addresses, and update that as you uncover hidden gotchas during development. Those checkbox counts even bubble up to your pull request list for easy at-a-glance status updates. This allows other collaborators to know what the progress is on the feature, and let's them jump in at the appropriate spot. We'd often use these checkboxes to track issues we discovered in development rather than opening new tickets. Or, reference existing issues that will get closed when the pull request gets merged . Continuous review Why review when someone has ""finished"" only to realize they might have taken a wrong turn somewhere early in development? With open pull requests as you work, reviews can be done as the work is done. Sure this isn't always practical when everyone is super busy, but it works great when you're bringing a new team member on board, or just working on a doozy of a feature. It's helped catch problems before they become disasters. Great for asynchronous/remote work While our work style was very much centred around in-person discussion, we did have enough occasions where someone was working remotely (home, different country, whatever). I found that this is where the pull request was critical in understanding the state of the project. As long as you kept the pull request current, it didn't matter if you missed an earlier Slack or office discussion that changed its direction. What's the catch? Is everyone on board? Like any approach to organizing your work, it's only as good as the effort the team puts into it. So you need to keep each other honest to make sure pull requests are updated in a timely fashion. Does it scale? I don't know. Like any methodology, make sure it makes sense for you. When it stops working, tweak something or look for alternatives. What's the priority? Unlike a scrum board, there is no clear indication of progress as you can't reorder open pull requests (without the use of some extensions at least), but you can probably get away with a good labeling/milestone system that helps alleviates this.",en,294
4,1461629452,CONTENT SHARED,-6843047699859121724,7527226129639571966,-1297230017812472163,,,,HTML,https://medium.com/@jeffersoncn/ganhe-6-meses-de-acesso-ao-pluralsight-maior-plataforma-de-treinamento-online-dd2b1c9a22b9,"Ganhe 6 meses de acesso ao Pluralsight, maior plataforma de treinamento online","Ganhe 6 meses de acesso ao Pluralsight, maior plataforma de treinamento online Muitos não sabem, mas o Pluralsight é uma das melhores, senão a melhor, plataforma de treinamentos online. Com quase 5000 cursos nas áreas de desenvolvimento, infraestrutura, dados, entre outras e que são ministrados por mais de 800 especialistas, é fácil reconhecer o valor de se ter acesso a uma biblioteca tão rica de conhecimento como esta. Abaixo temos exemplos de alguns cursos dentre a lista dos mais populares da plataforma: Building a Web App with ASP.NET Core RC1, MVC 6, EF7 & AngularJS Angular 2: Getting Started ASP.NET Core 1.0 Fundamentals C# Fundamentals with Visual Studio 2015 Building Applications with ASP.NET MVC 4 JavaScript Best Practices ASP.NET MVC 5 Fundamentals TypeScript Fundamentals Docker for Web Developers Applying Functional Principles in C# ASP.NET in Multi-tenant App, Examples in MVC, ExtJS, and Angular Python Fundamentals Java Fundamentals: The Java Language Rapid JavaScript Training C# Best Practices: Improving on the Basics Design Patterns Library Getting Started with Entity Framework 6 Rebuilding Web Forms Applications in MVC Advanced JavaScript Building Your First Xamarin.Android App from Start to Store Building Web Applications with Node.js and Express 4.0 WCF End-to-End WPF and MVVM: Test Driven Development of ViewModels Se interessou por algum deles? E que tal ganhar uma assinatura gratuita de 6 meses com acesso completo à toda essa coleção de cursos do Pluralsight e começar agora a aprender aquelas habilidades que você vem buscado desenvolver? A Microsoft em parceria com o Pluralsight nos oferecem essa oportunidade! Quer saber como? Então vamos lá! Primeiramente precisamos nos inscrever no programa Visual Studio Dev Essentials utilizando uma conta Microsoft ( hotmail , live ou outlook ). O cadastro é simples e gratuito e você pode fazê-lo nesse link : 2. Agora que já temos acesso ao Visual Studio Dev Essentials , podemos então clicar em "" Get Code "" que fica próximo ao logo do Pluralsight . 3. Ao clicar em "" Get Code "" aparecerá em seu lugar "" Activate "", que ao ser clicado, vai nos redirecionar para a página de cadastro do Pluralsight . 4. No formulário de cadastro, o campo do código já estará preenchido, bastando entrar com as informações restantes antes de clicar em "" Activate Benefit "". 5. Pronto! Você pode agora aproveitar os seus 6 meses de estudos no Pluralsight gratuitamente. Dica extra pra quem tem condição de aluno verificada no Dreamspark Também é possível obter uma assinatura de 3 meses gratuitamente no Pluralsight através do Dreamspark . No catálogo de software do Dreamspark , ao rolar a página até o final e chegar na sessão "" Treinamento e Certificação "", clique no logo do Pluralsight ou acesse esse link . Selecione o idioma: English e clique em "" Obter chave "". No final da página há um link para o resgate do código que irá redirecionar para o cadastro no Pluralsight . Preencha os dados, ative o benefício e pronto! Agora você tem um acesso de 3 meses a todos os cursos do Pluralsight ! Espero que aproveitem bem os estudos! Até a próxima!",pt,281
5,1473593226,CONTENT SHARED,-2358756719610361882,-9120685872592674274,5016857076790212194,,,,HTML,http://www.attps.com.br/cinco-motivos-para-investir-em-automacao-de-testes-e-reduzir-o-custo-do-erro/,Custo do Erro - Cinco motivos para investir em automação de testes,"Atualmente, o custo de manutenção de software representa cerca de 50% do custo de uma empresa desenvolvedora de software. O Instituto de Pesquisa Triângulo (RTI), sediado no Estados Unidos, realizou um estudo para o Instituto Nacional de Padrões e Tecnologia (NIST) dos EUA, em 2002, para estimar o impacto do teste de software inadequado sobre a economia dos Estados Unidos. As suas conclusões foram que esses custos ou perdas financeiras ocasionadas por defeitos de software ficaram na ordem de US$ 59,5 bilhões, ou 0,06% do PIB dos EUA. Cerca de 37%, ou US$ 22 bilhões, deste custo poderia ser evitado caso fossem aplicadas técnicas de automação de testes de forma correta, com infrastrutura adequada e realizados de forma sistemática. Um estudo recente da Universidade de Cambridge mostra que o custo global com defeitos de software, nas atividades de encontro e remoção dos defeitos, cresce anualmente a uma taxa de US$ 312 bilhões de dólares. Este custo representa em média a metade do tempo de desenvolvimento de projetos de software. Os desenvolvedores, em média, gastam 50,1% do seu tempo em atividades que não são de desenvolvimento. Metade do tempo útil do programador é gasto em atividades de correção de defeitos. Diante destes custos elevadíssimos, destacamos CINCO MOTIVOS PARA INVESTIR EM AUTOMAÇÃO DE TESTES DE SOFTWARE PARA REDUZIR ERROS EM PRODUÇÃO. 1- Teste manual sozinho não consegue ter a mesma abrangência de execução dos testes automatizados Cada grupo de desenvolvimento de software testa seus próprios produtos, contudo software entregues sempre tem defeitos. Os analistas de teste se esforçam para pegá-los antes do produto ser lançado, mas os defeitos insistem em reaparecer, mesmo com os melhores processos de testes manuais. Automação de testes de software é a melhor maneira de aumentar a eficácia, a eficiência e a cobertura de execução do seu teste de software, aumentando assim a confiabilidade e a estabilidade dos sistemas em ambiente de produção. 2- Teste manual é executado por seres humanos. E seres humanos invariavelmente falham. Teste de software manual é uma atividade realizada por um ser humano sentado em frente ao computador, que de forma cuidadosa, passa por telas de aplicativos, tentando várias combinações de uso e de entrada, comparando os resultados com o comportamento esperado e evidenciando as suas observações. Testes manuais são repetidos por várias vezes durante os ciclos de desenvolvimento de alterações no código fonte e outras situações, como vários ambientes operacionais e configurações de hardware. Estas repetições de teste manuais podem ser falhas, cada pessoa pode interpretar uma ação ou resultado de forma diferente no momento da execução do teste ou ainda, se ausentar por diversos motivos, gerando atrasos ao projeto. 3- Teste automatizado é executado por robôs, 24 horas por dia, 7 dias por semana. Uma ferramenta de testes automatizados é capaz de reproduzir ações pré-gravadas e pré-definidas, comparar os resultados com o comportamento esperado e relatar o sucesso ou fracasso desses testes manuais para um analista de teste. Uma vez que os testes automatizados são criados, eles podem facilmente ser repetidos e estendidos, uma tarefa impossível com os testes manuais. Devido a isso, os gerentes experientes descobriram que o teste de software automatizado é um componente essencial dos projetos de desenvolvimento bem-sucedidos. 4- A cobertura de teste aumenta de forma significativa nos testes automatizados Teste de software automatizado pode aumentar a profundidade e o alcance de testes para ajudar a melhorar a qualidade do software. Testes longos e que muitas vezes são evitados durante o teste manual podem ser executados sem supervisão. Eles podem até mesmo ser executados em vários computadores com diferentes configurações. Teste de software automatizado pode olhar para dentro de um aplicativo e ver o conteúdo da memória, tabelas de dados, conteúdo de arquivos, comparar imagem de telas, e os estados internos do programa para determinar se o produto está se comportando conforme o esperado. Automação de teste pode facilmente executar milhares de diferentes casos de teste complexos durante cada teste, fornecendo uma cobertura que é impossível com testes manuais. 5- Teste automatizado de software economiza tempo e dinheiro Testes de software tem que ser repetido muitas vezes durante os ciclos de desenvolvimento, para garantir que a qualidade seja mantida em níveis aceitáveis. Cada código fonte alterado precisará ter testes de software repetido. Para cada versão do software liberada, pode ser necessário que seja testado em todos os sistemas operacionais e configurações de hardware. Fazer isto manualmente é uma tarefa muito dispendiosa e demorada. Uma vez criado, os testes automatizados podem ser executados uma e outra vez sem nenhum custo adicional, e eles são muito mais rápidos do que os testes manuais. Teste de software automatizado pode reduzir o tempo para executar testes repetitivos de dias para horas, com um nível de acertividade muito maior do que os seres humanos podem conseguir realizar. A economia de tempo é traduzida diretamente em redução de custos, aumento de qualidade e satisfação do cliente. Veja neste comparativo entre teste manual e teste automatizado. O custo inicial do teste automatizado é de fato maior, mas é um custo que se paga já a partir do quinto sprint. E o custo do teste manual continua a crescer de forma linear até não poder ser mais viável, onde passa a deixar de ser feito e irá gerar custos de manutenção corretiva, além de desgastes na relação com o cliente e perda de mercado do seu produto. O ROI (return of investment) dos testes automatizados sobre teste manual pode ser da ordem de 63% ao final de um ano. Algo espetacular, concorda? Por Rodrigo Almeida, Gerente de Qualidade de Software",pt,280
6,1469678235,CONTENT SHARED,-8208801367848627943,-3390049372067052505,2045534933671019150,,,,HTML,http://www.geekwire.com/2016/ray-kurzweil-world-isnt-getting-worse-information-getting-better/,Ray Kurzweil: The world isn't getting worse - our information is getting better,"Ray Kurzweil, the author, inventor, computer scientist, futurist and Google employee, was the featured keynote speaker Thursday afternoon at Postback , the annual conference presented by Seattle mobile marketing company Tune. His topic was the future of mobile technology. In Kurzweil's world, however, that doesn't just mean the future of smartphones - it means the future of humanity. Continue reading for a few highlights from his talk. On the effect of the modern information era: People think the world's getting worse, and we see that on the left and the right, and we see that in other countries. People think the world is getting worse. ... That's the perception. What's actually happening is our information about what's wrong in the world is getting better. A century ago, there would be a battle that wiped out the next village, you'd never even hear about it. Now there's an incident halfway around the globe and we not only hear about it, we experience it. On the potential of human genomics: It's not just collecting what is basically the object code of life that is expanding exponentially. Our ability to understand it, to reverse-engineer it, to simulate it, and most importantly to reprogram this outdated software is also expanding exponentially. Genes are software programs. It's not a metaphor. They are sequences of data. But they evolved many years ago, many tens of thousands of years ago, when conditions were different. How technology will change humanity's geographic needs: We're only crowded because we've crowded ourselves into cities. Try taking a train trip across the United States, or Europe or Asia or anywhere in the world. Ninety-nine percent of the land is not used. Now, we don't want to use it because you don't want to be out in the boondocks if you don't have people to work and play with. That's already changing now that we have some level of virtual communication. We can have workgroups that are spread out. ... But ultimately, we'll have full-immersion virtual reality from within the nervous system, augmented reality. On connecting the brain directly to the cloud: We don't yet have brain extenders directly from our brain. We do have brain extenders indirectly. I mean this (holds up his smartphone) is a brain extender. ... Ultimately we'll put them directly in our brains. But not just to do search and language translation and other types of things we do now with mobile apps, but to actually extend the very scope of our brain. Why machines won't displace humans: We're going to merge with them, we're going to make ourselves smarter. We're already doing that. These mobile devices make us smarter. We're routinely doing things we couldn't possibly do without these brain extenders.",en,266
7,1469992520,CONTENT SHARED,2581138407738454418,6756039155228175109,611377856408166257,,,,HTML,https://medium.com/@rdsubhas/10-modern-software-engineering-mistakes-bc67fbef4fc8,10 Modern Software Over-Engineering Mistakes,"10 Modern Software Over-Engineering Mistakes Few things are guaranteed to increase all the time: Distance between stars, Entropy in the visible universe, and Fucking business requirements . Many articles say Dont over-engineer but don't say why or how. Here are 10 clear examples. Important Note: Some points below like ""Don't abuse generics"" are being misunderstood as ""Don't use generics at all"", ""Don't create unnecessary wrappers"" as ""Don't create wrappers at all"", etc. I'm only discussing over-engineering and not advocating cowboy coding. 1. Engineering is more clever than Business Engineers think we're the smartest people around because we build stuff. This first mistake often makes us over-engineer. But if we plan for 100 things, Business will always come up with the 101st thing we never thought of. If we solve 1,000 problems, they will come back with 10,000 problems. We think we have everything under control - but we have no clue what's headed our way. In my 15 year involvement with coding, I have never seen a single business ""converge"" on requirements. They only diverge. Its simply the nature of business and its not the business people's fault. TL;DR - The House (Business) Always Wins Tip: If you don't have time to go through the entire post, then this one point is enough. 2. Reusable Business Functionality When Business throws more and more functionality (as expected), we sometimes react like this: We try to group and generalize logic as much as possible. This is why most MVC systems end up in either Fat Models or Fat Controllers. But as we saw already, business requirements only diverge, they never converge. Instead, how should we have reacted: Shared logic and abstractions tend to stabilise over time in natural systems. They either stay flat or relatively go down as functionality gets broader. When the opposite happens, it creates systems that are Too big to fail (leading closer to the dreaded rewrite). Example: We created a User profile system for a previous client. Started with a CRUD controller with shared functionality because we assumed everything is going to be similar. But ended up with 13 different signup flows - initial social connection, a long signup form upon first entry, smaller and edit page sections, completely different looking profile page and so on and on - that it made very little sense to share stuff in the end. Similarly, an Order View and Order Edit flow ends up so inherently different from the actual Ordering flow. Try to vertically split business functionality first before splitting horizontally. This works in all cases - isolated services, trunk-based services, language-specific modules, etc. Also helps to switch from one form to another with ease. Otherwise it becomes increasingly complicated to change parts of the system. TL;DR - Prefer Isolating Actions than Combining Tip: Pick one external-facing action (Endpoint/Page/Job/etc) in your codebase. How many context switches does someone need to understand what's going on? 3. Everything is Generic (Sometimes goes together with previous point, but also seen applied individually in separate projects) Want to connect to a database? Lets write a Generic Adapter Query that database? Generic Query Pass it some params? Generic Params Build those params? Generic Builder Map the response? Generic Data Mapper Handle the user request? Generic Request Execute the whole thing? Generic Executor and so on and so on Sometimes Engineers get carried away. Instead of trying to solve the business problem, we waste our time trying to find the perfect abstractions. The answer is so simple. Designs are always playing catch up to changing real world requirements. So even if we found a perfect abstraction by miracle, it comes tagged with an expiry date because #1 - The House wins in the end. The best quality of a Design today is how well it can be undesigned. There is an amazing article on write code that is easy to delete, not easy to extend . TL;DR - Duplication is better than the wrong abstraction Conversely, Duplication is sometimes essential for the right abstraction. Because only when we see many parts of the system share ""similar"" code, a better shared abstraction emerges. The Quality of Abstraction is in the weakest link. Duplication exposes many use cases and makes boundaries clearer. Tip: Shared abstractions across services sometimes leads to Microservices ending up as a Distributed Monolith . 4. Shallow Wrappers The practice of wrapping every external library before using it. Unfortunately most wrappers we write are Shallow. We are juggling between delivering functionality and writing a good wrapper. So our wrappers are mostly tightly bound to the underlying library (in some cases being a 1:1 mirror, or doing 1/10th of what the original library does with 10x effort). If we change the underlying library later, usages of this wrapper everywhere usually end up having to be changed as well. Sometimes we also mix up business logic inside wrappers, making it neither a good wrapper nor a good business solution, but some kind of gluey layer in between. This is 2016. External libraries and clients have improved leaps and bounds. OSS Libraries are fantastic. They have high quality and well tested codebases written by awesome people, who have had dedicated, focused time writing it. Most have clear, testable, instrumentable APIs, allowing us to follow the standard pattern of Initialize - Instrument - Implement. TL;DR - Wrappers are an exception, not the norm. Don't wrap good libraries for the sake of wrapping Tip: Creating an ""agnostic"" wrapper is no laughing matter. ""Swap out library"" comes from a mindset of ""Configurability"" which is covered in detail in the ""<X>-ity"" section later. 5. Applying Quality like a Tool Blindly applying Quality concepts (like changing all variables to ""private final"", writing an interface for all classes, etc) is NOT going to make code magically better. Check Enterprise FizzBuzz (or Hello World ). It has a gazillion code. In the micro-level each class follows SOLID principles, uses all sorts of great Design patterns (factory, builder, strategy, etc) and coding techniques (generics, enums, etc). It gets high Code quality ratings from CQM tools. But if we take a step back, this prints Fizz Buzz . TL;DR - Always take a step back and look at the macro picture Conversely, automated CQM tools are good at tracking Test coverage, but can't tell whether we are testing the right thing. A benchmark tool can track performance, but can't tell whether stuff runs parallel or sequential. Only a Human has to look at the big picture. Which takes us to... 5.1. Sandwich Layers Lets take a concise, closely bound action and split it into 10 or 20 sandwiched layers, where none of the individual layers make any sense without the whole. Because we want to apply the concept of ""Testable code"", or ""Single Responsibility Principle"", or something. In the Past  - this was done by a chain of Inheritance. A extends B extends C extends D and so on. Now  - People do the exact same thing, except they make each class have an interface/implementation and inject it into the next layer, because duh SOLID. Concepts like SOLID came up in response to abuse of Inheritance and other OOP concepts. Most engineers are unaware of where/why these concepts came from, but just end up following the memo. TL;DR - Concepts need shift in Mindset. Cannot be applied blindly like tools. Learn a different language and try the other mindset of doing things. That makes a fundamentally better developer. Pouring old wine in a new labelled bottle doesn't work for concepts. We never have to tear apart a clear design in the name of applying a concept. 6. Overzealous Adopter Syndrome Discovered Generics. Now even a simple ""HelloWorldPrinter"" becomes ""HelloWorldPrinter<String,Writer>"". Don't use Generics when its obvious that a problem handles only specific data types, or when normal type signatures are enough. Discovered Strategy Pattern. Every ""if"" condition is now a strategy. Why? Discovered how to write a DSL. Gonna use DSLs everywhere. I don't know... Used Mocks. Gonna mock every single object I'm testing. how to even... Metaprogramming is awesome, let me use it everywhere describe why... Enums/Extension Methods/Traits/whatever are awesome, let me use it everywhere this is wrong. TL;DR - TL;DRs should not be used everywhere 7. <X>-ity Configurability Security Scalability Maintainability Extensibility ... Vague. Unchallenged. Hard to argue against. FUD. Example 1: Lets build a CMS for our forms for ""Extensibility"". Business people can add new fields easily. Result: Business people never used it. When they had to, they would have a developer sit right beside them and do it. Maybe all we needed was a simple Developer guide to add a new field in few hours, instead of a point-and-click interface? Example 2: Lets design a big Database layer for easy ""Configurability"". We should be able to switch database in a single Magic file. Result: In 10 years, I've seen only one business make serious effort to completely swap a fully vested database. And when it happened, the ""Magic file"" did not help. There was so much operational work. Incompatibilities and gaps in functionality. And the client asked us to switch ""one half"" of our models to the new NoSQL database. We tore our hair apart - our Magic toggle was a single point of change, but this was cross-cutting. In today's world, we're well past a point where there is no way to design a single configurable layer for modern document/KV stores (e.g. Redis/ CouchDB/ DynamoDB/ etc). Not even SQL Databases like Postgres/ HSQLDB/ SQLite are compatible for that matter. Either you completely dumb down your data layer (and struggle with delivering functionality), or acknowledge the database as part of your solution (e.g. postgres geo/json features) and throw away configurability guilt. Your stack is as much part of your solution as your code. When you let go of this vague X-ity, better solutions start to emerge. e.g. You can now break data access vertically (small DAOs for each action) instead of horizontally (magic configurable layer), or even pick and choose different data stores for different functionality [micro] services style. Example 3: We built an OAuth system for enterprise clients. For the Internal administrators - we were asked to use a secondary Google OAuth system. Because Security. If someone hacks our OAuth, business didn't want them to get access to admin credentials. Google OAuth is more secure, and who can argue against ""more security"" at any point? Result: If someone really wanted to hack into our system, they don't have to go through the OAuth layer. We had many vulnerabilities lying around. e.g. they could have just done privilege escalation. So all that effort of supporting two different OAuth user profiles and systems everywhere had little to no returns in securing our system, compared to properly securing our base first. TL;DR - Don't let <X>-ities go unchallenged. Clearly define and evaluate the Scenario/Story/Need/Usage. Tip: Ask a simple question - ""What's an example story/scenario?"" - and then dig deep on that scenario. This exposes flaws in most <X>-ities. 8. In House ""Inventions"" It feels cool in the beginning. But these are most common sources of Legacy in few years. Some examples: In-house libraries (HTTP, mini ORM/ODM, Caching, Config, etc) In-house frameworks (CMS, Event Streaming, Concurrency, Background Jobs, etc) In-house tools (Buildchains, Deployment tools, etc) Things that are missed: It takes a lot of skills and deep understanding of the problem domain. A ""Service runner"" library needs expertise of how daemons work, process management, I/O redirection, PID files and so on. A CMS is not just about rendering fields with a datatype - it has inter-field dependencies, validations, wizards, generic renderers and so on. Even a simple ""retry"" library is not so simple. There is a constant effort required to keeping this going. Even a tiny open source library takes a lot of time to maintain. If you open source it, nobody cares. Except the original starters and people paid to work on it. The original starters will eventually move away with the ""Inventor of X"" tag in their résumé. Contributing to existing frameworks takes up more time NOW. But creating an ""invention"" takes up considerably more time going forward. TL;DR - Reuse. Fork. Contribute. Reconsider. Finally, if really pushed to go ahead, do it only with an Internal OSS mindset. Fight with existing competition. Work to convince even internal people to use this. Don't take it for granted since you are an insider. 9. Following the Status Quo Once something is implemented in a certain way, everyone implicitly starts building on top of it. Nobody questions the status quo. Working code is considered ""the right way"". Even in cases where it was never intended, people go all the way around to even slightly fit into what's existing. A Healthy System churns. An Unhealthy system is additive-only. Areas of code that don't see commits for a long time are smells. We are expected to keep every part of the system churning. Here is a wonderful article explaining this in detail . How teams iterate vs How they should, Every single day: TL;DR - Refactoring is part of each and every story. No code is untouchable 10. Bad Estimation Frequently we see really good teams/coders end up producing shit. We see their codebase and wonder ""WTF, was this really developed by that team/person I thought was awesome?"" Quality needs time and not just skill. And smart developers frequently overestimate their capability. Finally they end up taking ugly hacks to finish stuff on a self-committed suicide timeline. TL;DR - Bad Estimation destroys Quality even before a single line of code is written If you made it this far, thanks! Reminder that I'm only discussing over-engineering and not advocating cowboy coding. Further links:",en,255
8,1468247818,CONTENT SHARED,-1297580205670251233,534764222466712491,-9077035980881675856,,,,HTML,https://viagensdealline.com/2013/08/20/a-minha-viagem-a-maternidade/,A minha viagem à Maternidade #tetodomundo,"Já fazia uma semana, desde o dia 26 de dezembro, que eu não parava de sentir uma fraqueza horrível pelo corpo, um embrulho constante nas entranhas e um mau humor insuportável. O mundo todo tinha perdido suas cores, eu estava com uma sensação fortíssima de morte iminente. Era primeiro de janeiro de 1999, toda a minha família se reunia num resort no interior de São Paulo para comemorar a passagem do ano. Mas aquele réveillon eu não comemorei com eles, eu estava de cama. Havia dormido desde o dia 30 de dezembro e não conseguia levantar para nada. Quando minha mãe passou pelo meu quarto naquela manhã de ano novo, eu implorei a ela: - Mãe, eu estou falando muito sério com você. Eu preciso ir para um hospital urgente! Eu tenho certeza que algo muito grave está acontecendo comigo. Por favor, mãe, me ajuda! Mesmo diante de minha urgência hospitalar e de meu claro desespero, minha mãe, que é uma médica pediatra, respondeu: - Fica calma, minha filha... Olha, não tem nenhum hospital ou clínica aqui perto. Amanhã bem cedinho a gente já vai embora para casa e eu prometo que assim que chegar em Brasília a gente te leva direto para o hospital, está bem? Descansa só mais esse dia de hoje que amanhã tudo vai se esclarecer. ... E que você tenha o ano mais feliz da sua vida, minha filha! Não adiantava continuar insistindo. Eu ali no meu leito de morte e minha mãe sem tirar aquele sorriso insuportável do rosto. Mas eu estava tão fraca que não conseguia nem sentir vontade de esconjurá-la. Fiz a viagem de volta para Brasília como pude, aos trancos, buracos e barrancos. Sonhando com o prometido de que alguém me levaria para o hospital assim que chegasse e que algum médico me daria a cura para aquela sensação terrível que consumia meu corpo por completo. Triste ilusão. Assim que chegamos, ao invés de hospital, minha mãe recomendou a Leonardo, o meu namorado que estava viajando comigo, que passássemos direto numa farmácia e comprássemos um teste de gravidez. TESTE DE QUÊ??? Eu estava fisica e psicologicamente abalada demais para rir de uma palhaçada tão sem graça como aquela. Eu vinha de uma depressão crônica de vários anos, havia ficado um bom tempo sem nem menstruar por causa da doença. Eu comia bem, mas há muito que só emagrecia. Já estava pele e osso, sempre me considerando uma pessoa muito debilitada. Até nem tomava mais anticoncepcional porque as pílulas só pioravam o meu estado de saúde, tanto físico quanto mental. ""Eu nem me considero uma mulher completamente adulta ainda"" - pensava eu. ""Sou magra demais e não tenho nenhuma maturidade para ser mãe. Que óbvio que eu não estou grávida!"". Aceitei fazer a porcaria do teste só para que minha mãe tirasse aquele sorrisinho impertinente do rosto e me levasse finalmente direto para uma emergência. Fui até o banheiro igual a um zumbi, levando na mão o pacotinho com o tal do teste. Leonardo ficou esperando do lado de fora calado, com aquela cara de quem há dias não tinha a menor idéia do que estava acontecendo comigo. Fiz o meu xixi e o papelzinho indicador ficou completamente rosa. Dei uma olhada nas instruções para saber o que aquilo significava e a bula era bastante clara. Era simples demais. Azul, teste negativo. Rosa, teste positivo. Como assim positivo? O quê diabos isso significa?? Mostrei para o Leonardo e eu nunca vou esquecer o tamanho do sorriso que ele deu. Mas eu mesma, na minha cabeça não tinha nenhum pensamento muito claro passando por ali. Talvez desespero seja isso mesmo... Eu estava em choque, catatônica. Então de repente, não tinha mais nada embaixo dos meus pés. As coisas, parece que começavam a rodar na minha frente. Me deu uma vontade imensa de voltar atrás, de descobrir a fórmula para viajar no tempo e reverter todo aquele pesadelo absurdo. Como assim positivo?? Eu estou no meio de uma porção de planos para o futuro, para a minha carreira, para o meu crescimento! Inclusive, a minha lista de coisas para fazer esse ano está gigante! Não existe a menor possibilidade de aparecer uma criança a essa altura do campeonato. Eu tenho ZERO de estabilidade, sem condição nenhuma de sustentar um filho ainda por cima! A primeira imagem que veio à minha cabeça era do paredão de concreto de um viaduto escuro e mal cuidado. Numa noite de lua clara, onde eu estava sentada embaixo de uma tenda de papelão com aquela criança no meu colo, coberta só com um pano sujo qualquer. Lembro-me de ter visto a fome claramente naquela imagem. Um cansaço extremo. Um abandono absoluto da vida. Vou acabar de baixo da ponte... Pensei em quem seria o primeiro a morrer, se seria eu ou o bebê... Era óbvio que eu não iria conseguir sustentar aquela criança. Esse era o fim. ....... Lição número um da maternidade, e talvez a maior de todas as lições: A natureza é perfeita e implacável. E a nossa arrogância é uma total estupidez. Gente, eu já tinha 24 anos de idade! Como é que eu podia ser uma pessoa tão despreparada e imatura assim? Mas eu era. Os jovens de hoje são totalmente superprotegidos. Tanto fisica quanto psicologicamente, aos 24 anos qualquer um já está para lá de pronto para ter um filho. Como é que eu não sabia disso?? Quanta arrogância a minha, de achar que eu não estava pronta... Levaram-se pouquíssimos dias para eu começar a compreender o tamanho da sabedoria da natureza. Existe sim vida após o resultado positivo de um teste de farmácia. Dias se passaram e eu ainda não havia morrido! Na verdade, exatamente nada tinha mudado na minha rotina até então. ""Interessante..."" - pensei eu. Tudo ainda era muito confuso, eu ainda estava muito zonza. Mas assim que a ""catatonisse"" passou, lá por volta da primeira semana depois de tomar ciência dessa condição chamada gravidez, eu começava a perceber que um amor muito forte já brotava dentro de mim. Uma coisa muito diferente de tudo aquilo que eu havia sentido antes. Uma coisa bem mais profunda, parece que mais pura... Alguns outros poucos dias mais e então tudo na minha cabeça já mudava completamente. Assim que a maior de todas as responsabilidades bate a sua porta, você amadurece na marra. Ou talvez, só pára de segurar uma maturidade que na verdade sempre esteve ali, mas que nunca tinha sido preciso utilizá-la. ...... As lições da maternidade são diárias e diversas. Infelizmente, no caso da minha gravidez não foram só os três primeiros meses de mal estar e enjôo não. Eu passei todos os noves meses me sentindo um lixo. E minha mãe falou que com ela aconteceu o mesmo, tanto quando estava grávida de mim, quando de meu irmão. Eu me sentia tão mal, que nem tenho muitas lembranças do dia que fui fazer a ecografia para descobrir o sexo do bebê. Lembro só de o Léo ter ficado muito contente com o resultado. Mas para mim mesma, nada daquilo tinha a menor importância. Já por outro lado, também por causa da gravidez, Léo e eu decidimos nos casar. Um evento para mais de duzentos familiares e amigos. Foi o dia que eu me senti mais linda em toda a minha vida. Maquiagem, cabelo, unhas, sapato, hormônios a flor da pele... Tudo! Uma produção impecável. Lembro-me perfeitamente do exato momento da abertura do grande portal da igreja, lotada. Eu vinha com um véu de cinco metros de comprimento todo bordado, saindo gloriosamente de um Chevy Camaro esporte, vermelho cor de rubi. O meu vestido branco era deslumbrante, do jeito que toda a noiva deve se achar. Eu escolhi o estilo ""Julieta de Shakespeare"", porque no fundo eu sou uma romântica e também para aproveitar e já disfarçar a barriguinha que àquela altura estava para lá de saliente. Eu achei que meu coração fosse parar quando a música alta e majestal começou a tocar só por causa da minha presença. Havia uma multidão de olhos arregalados em minha direção. Eu vinha de braços dados com o meu pai, que naquele dia sentia um orgulho muito grande de mim. Podia ver meu irmão lá na frente, no altar, com seu lindo sorriso no rosto. E minha mãe com minha única avó ainda viva, magníficas! E já chorando, lógico. A festa foi muito simples, mas grande e extremamente alegre, lotada de pessoas que nos desejavam uma felicidade absoluta. Senti a presença muito forte de um primo amado que eu tinha perdido há pouco tempo, eu sabia que ele estava ali compartilhando aquele momento comigo. Mas voltando à história da gravidez, bem no dia do meu casamento os meus peitos estavam gigantes de tanto leite. Lindos, redondos e naturais. Para quem nunca teve peito nenhum, essa com certeza é uma das boas lembranças de quando se está grávida. Lembro-me de ter comprado umas coisinhas aqui e ali, de ter montado o quartinho do bebê com móveis doados pela família e reformados por mim com a ajuda da minha mãe. Por sinal, apoio sempre total na minha vida e diário durante aquela fase tão difícil. Fiz eu mesma a pátina do bercinho, da cômoda e do armário. Lembro-me de ter bordado quadrinhos infantis para pendurar na parede; do dia que estava em Goiânia comprando todo o enxoval; e lembro-me também de um churrasco na beira do lago que fizemos para barganhar fraldas descartáveis dos amigos (foto abaixo). Enchemos um armário inteiro só de fraldas. Mas lembro também de infecção urinária, azia, estresse, gases doloridos, estrias, aftas, inchaço, de no último mês estar com um barrigão tão grande que não conseguia mais ver nem meus pés nem minhas pernas, de estar sentido uma dificuldade enorme para respirar, comer, dormir, trabalhar, tomar banho, andar, mexer, sentar, levantar, conversar, pensar, sorrir, existir, ... O tamanho que estava ficando a minha barriga nas últimas semanas daquela contagem regressiva começou a me dar pânico. Só não surtei de vez porque na verdade quando não se respira direito, o raciocínio vai lá para baixo, e quando não se dá conta de pensar, isso inclui também não pensar besteira. Simplesmente vegetei, apavorada. ........ No dia 20 de agosto daquele mesmo ano, no exato dia do aniversário de 20 anos do meu irmão mais novo, eu acordei as 6 da manhã com uma dor intestinal meio chatinha, fui ao banheiro algumas vezes mas nada acontecia... Mimada como sempre fui, já liguei logo para a minha mamãezinha para pedir ajuda. - Mãe, que remédio eu posso tomar para dor de barriga? Resolvi perguntar, porque uma das lições sobre gravidez que a gente já aprende desde o começo, é que não se pode mais botar qualquer coisa para dentro de você. Tudo tem regra. - Quando isso começou, minha filha? - ""respondeu"" minha mãe com outra pergunta. - Tem menos de uma hora - disse eu. - Me deixa falar com o Léo. - Oi, Dona Cleusa... - disse Leonardo pegando o telefone. - Léo, vai começando a preparar uma malinha com as coisas dela e do bebê. Nós vamos aqui ligar para o obstetra para saber como ele quer proceder. Peguei o telefone da mão do Léo e disse já sem paciência: - Mãe, que parte da frase ""Eu estou só com uma dor de barriga"" você não está entendendo? - Filha... Contração é igual à dor de barriga. Essa foi a primeira lição daquele dia que seria longo... O recado do meu obstetra, que estava em meio a sua caminhada matinal, era para que eu aguardasse ainda mais algumas horas e entrasse em contato com ele lá pelo meio da manhã para reportar a evolução do caso. Eu acho que em menos de 15 minutos depois daquela conversa apavorante, eu já tinha feito a tal da malinha e já estava dentro do carro obrigando o Léo a me dirigir até o hospital no grito. Eu estava em um completo estado de pânico. Já no hospital foi quando eu comecei a sentir as primeiras contrações para valer. Muito curtas ainda, mas já dilacerantes. O meu obstetra chegou logo em seguida e me examinou de prontidão. Falou que estava tudo indo muito bem e que eu tinha que esperar dilatar mais não sei o quê, do não sei o quê lá. Foi quando então que eu implorei, por tudo o que era mais sagrado, confesso que num tom muito mais alto do que ele merecia, para que ele tirasse imediatamente aquela criança de dentro de mim. A minha barriga estava gigante e eu tinha muita certeza na minha cabeça que nunca que eu iria conseguir colocar tudo aquilo ali para fora sozinha. O Doutor Sebastião é um santo! Ele aguentou todos os meus pitis daquele dia com toda a serenidade de um grande amigo e de um profissional de extrema competência. Ele sabia que o meu bebê não tinha virado de cabeça para baixo, que estava com três voltas do cordão umbilical em seu pescoço e que o meu caso teria que ser Cesária de qualquer forma. Ele não me deixou sofrer absolutamente mais nada. Já deitada numa maca em direção ao centro cirúrgico, num movimento desconcertante, encarando aquele teto pálido e frio, cheio de luzes passando rapidamente pelos meus olhos, sem ter a mínima noção do que me aguardava lá na frente, foi então que eu senti um pânico ainda maior. O maior de todos na minha vida até então. Eu me lembro de estar chorando como uma louca desesperada. Só me acalmei quando o meu anjo da guarda veio, segurou na minha mão e falou bem baixinho ao meu ouvido: ""Pode se acalmar agora, eu estou aqui com você"". Era o meu primo Evandro, de apelido Deco, assistente do meu parto aquele dia. A sala que me colocaram estava vazia, só eu e ele ali. Ele me sentou na maca com o seu sorriso doce, sua voz mansa e seu tato de médico sábio. Depois chegou outro cara de branco, também com um sorriso, passou a mão pelas minhas costas através daquela camisola de doente, com a abertura atrás, em que eu estava vestida. Eu senti uma picadinha bem de leve na região da coluna. Deco ainda segurava a minha mão calmamente. O outro doutor fazia mais algumas coisas ali por trás que eu não tinha a menor idéia do que era porque eu não conseguia ver nada. Muito depois que eu fui saber que ele estava enfiando aquele agulhão gigante da anestesia peridural na minha espinha. Mas eu não sentia nada por causa da anestesia prévia que ele tinha me dado. Obrigada doutor. Eu implorava muito para o Deco me colocar para dormir urgentemente. Ele me perguntou se eu não ia querer ver o meu bebê assim que nascesse. Eu então surtei de vez. Só de cogitar a possibilidade de ver sangue, o meu coração já disparava para a boca. ""Deco, me coloca para dormir agora! Pelo amor de Deus!!!"" Ele então consentiu. Me deitou de volta na maca, embaixo de uma carrossel de luzes fortíssimas e começou a preparar umas coisinhas por ali, até que alguém botou um grande pano branco na minha frente, entre minha cabeça e minha barriga. Deco então falou: - Já vou te colocar para dormir em um minuto. - Eu não quero ver sangue! - eu dizia com terror. - Você não vai ver nada. Confie em mim. Eu senti um pequeno estalinho na barriga e bem rapidamente depois um jovem doutor saiu de trás do pano branco, levantou a minha mão, fez alguma coisa por ali e bem simpaticamente me pediu que contasse até dez. - Um... Eu não me lembro do dois. Também muito depois, fiquei sabendo que naquele momento em que eu estava crente que eles nem tinham começado a cirurgia ainda, na verdade já haviam aberto a minha barriga toda. Na minha cabeça, cirurgia era uma coisa que demorava horas e horas, mas a realidade é que a minha Cesária não durou nem trinta minutos. Por várias razões médicas, durante o parto a mãe só pode ficar inconsciente após a criança sair do útero. Aquele estalinho que eu senti já era o bebê se descolando de mim através do corte apertado. Tudo foi muito rápido. Eu dormi no segundo antes de ouvir o meu filho chorar. ........ Acordei e meus olhos se relutaram a abrir. Estava encostada na parede de um corredor do hospital, ainda deitada numa maca. Fiquei inconsciente por mais ou menos uma hora depois do parto. Quando minha visão desembaçou, a primeira coisa que apareceu na minha frente foi o sorriso enorme do meu pai. - Ooooooooooi! - ele falou. - Como você está se sentindo? - Eu sei lá... - respondi. Estava ainda sonolenta. Uma enfermeira (eu acho) me transportou até o quarto em que eu iria passar a noite. Só sei que em menos de uma hora, o efeito da anestesia começou a diminuir, e foi então que eu comecei a sentir a maior dor de todo esse mundo. A parte de baixo da minha barriga começou a latejar um pouquinho, depois foi piorando, e em questão de minutos era como se estivesse uma faca alucinada serrando a minha barriga de um lado para o outro sem parar, bem no lugar dos pontos e da faixa branca do curativo. Lá estava eu aos berros de novo. Já mandaram chamar logo o meu ""personal"" anjo da guarda. Deco, como todo anjo que se preze, aplicou na minha veia alguma droga sobrenatural, que teve o poder de acabar completamente com toda aquela dor que eu estava sentindo. Ele botou a mão no vidrinho do soro que escorria em mim, e em questão de milésimos de segundos uma grande onda percorreu todo o meu corpo, do primeiro fiozinho de cabelo até a pontinha da unha do meu pé. Uma grande onda de paz. Eu sorri de verdade pela primeira vez depois de longos nove meses. Na verdade, eu gargalhei! Foi bom demais. Logo então, meio que de repente, a porta do quarto se abriu. E nesse momento a visão mais maravilhosa do mundo surgiu magicamente à minha frente. Era um príncipe todo de branco. O príncipe mais encantado de todos os príncipes. ""O cavaleiro errante enviado pelo Universo para resgatar a minha vida das trevas da imaturidade. O salvador abençoado que veio inundar o vazio da minha existência com o beijo de seu amor eterno."" Ele tinha os olhinhos fechados, estavam vermelhos. A mãozinha era cheia de dedinhos. Que coisa MAIS LINDA! Mastercard que me perdoe, mas ver o rosto de seu filho pela primeira vez não tem preço. É o cataclisma de meses e meses de ansiedade pensando em como seria aquela imagem. O coração vai a mil. Mesmo quando injustamente ele é a cara do pai e não puxou nada de você, nada disso tem importância. ""O MEU filho é MUITO LINDO!"" - repetia eu sem conseguir parar. Acho que era uma mistura do efeito das drogas anestésicas com a visão do paraíso, tudo ao mesmo tempo. Veja a foto abaixo dos meus dois anjos juntinhos! Como que um dia passou pela minha cabeça que eu pudesse não estar pronta para esse momento? Quanta arrogância... Muito obrigada por essa grande lição, minha mãe natureza. ......... Hoje o meu filho faz quatorze anos. Eu ainda tento entender o que foi que eu fiz para merecer um filho tão perfeito. O bebê mais lindo, a criança mais doce, o menino mais inteligente, o pré-adolescente mais meigo, o companheiro mais amoroso, o futuro homem mais sensível que existe. Eu nunca pensei muito em ter filhos, mas sempre que imaginava como eles seriam, nem de longe passava pela minha cabeça que seria algo tão maravilhoso como o meu Luiz. O maior amor de toda a minha vida. Feliz aniversário, meu filho amado. Escrevi esse post de presente para você.",pt,253
9,1471520397,CONTENT SHARED,-1633984990770981161,2195040187466632600,1000828687449358272,,,,HTML,https://medium.com/@roxrogge/ux-ou-ui-4c0a1bcb4b83,UX ou UI?,"UX ou UI? Tenho escutado essa pergunta com frequência e sempre me dói muito respondê-la. Há um bom tempo vemos vários comentários sobre UX Designer e UI Designer sem que as pessoas saibam, de fato, o que faz cada um desses profissionais. Mas antes de falarmos sobre as diferenças vamos rapidamente refletir e voltar uns 15 anos. Parece muito tempo, não? Mas você parou para pensar como passou rápido e como foi nossa evolução tecnológica? Em 2002, quando minha filha tinha um ano, eu e meu marido já estávamos preocupados com a segurança dela na adolescência. Um dia estávamos conversando e ele olhou para o seu incrível celular mega blaster, um motorola V120 do Guga, com rádio FM e gravador, e disse: - Não se preocupe, quando nossa filha tiver 15 anos o celular já vai ter câmera e vamos conseguir vê-la em real-time onde ela estiver! E não é que ele estava certo? Evoluiu muito rápido. E como você acha que aconteceu essa evolução? Foi apenas pela busca da beleza do produto ou pela necessidade do usuário? Nessa época as siglas UX e UI não eram tão populares para definir cargos: éramos todos Designers e fomos trabalhando mesmo sem uma denominação específica e muitos sem perceber o que já estavam fazendo. A necessidade do usuário e os avanços tecnológicos criaram uma demanda especializada. Mesmo que a experiência do usuário sempre tenha existido, ela começou a ganhar uma definição nos anos 90, quando Don Norman disse em uma entrevista: ""Eu inventei o termo experiência do usuário porque achava que interface do usuário e usabilidade eram muito restritos, eu queria cobrir todos os aspectos da experiência de uma pessoa com o sistema, incluindo design industrial, gráficos, a interface, a interação física e o manual. Desde então o termo tem se espalhado amplamente..."" [Don Norman / meados de 1990] Chegamos em um tempo em que existem milhares de apps no celular, smart watch, tablet, smart tv, IoT [internet das coisas] e a todo momento surgem novos produtos que usam interfaces e precisam de uma boa experiência para o produto ter vida no mercado. Nesta última década a área de design se desenvolveu com muita rapidez, e por isso evoluiu também o número de especialidades na profissão e as formas de denominá-las: Design, Web Design, Web-Dev, Design visual, Design de interface, IxD, Design de Interação, Design de Produto, UI, UI Design, UI/UX Design, Usabilidade, UX, UX Design, Design da Experiência do usuário, UX Strategy, UCD, Design Centrado no Usuário, Design de Aplicação, Design de Navegação, User Experience Researcher, Design Industrial, Design da Informação, AI, Information Architect, Arquiteto da Informação, Data-Informed Design, Data-Driven Design, Data-""whatever"" Design, Service Design, só para mencionar algumas. Tem design para tudo hoje em dia! As funções se tornam disciplinas isoladas entre suas especializações. E com isso há dúvidas na área e muitas pessoas não sabem que caminho seguir. Então afinal, qual a diferença entre UX e UI? De forma simplificada , please? UX, User Experience, Experiência do Usuário UX é toda a pesquisa para uma melhor interação e comportamento do site/app/produto/marca. Pense em pesquisa, testes, experiência, emoções, conteúdo, hierarquia, fluxos... UI, User Interface, Interface de Usuário UI é o visual do site/app/produto/marca. Pense em interação, harmonia visual, fonte, respiro, tipografia, cores, formas... Podemos dizer que em um determinado projeto, o UX pesquisa e testa como o produto vai dar prazer ao usuário, e o UI cuida da interface, a parte visual do produto. Mas e aí? UX é parte de UI? Ou UI é parte de UX? Eles andam de mãos dadas desde sempre. É impossível pensar um projeto sem pesquisa, sem saber quem vai usar o produto, sem pensar nas frustrações e motivações dos usuários. É o UX que direciona a escolha da UI. E a UI também determina a experiência. Usando uma metáfora simples: você não pode ir à partida de futebol no estádio de um time usando uma camiseta da mesma cor do time rival. Tem que verificar e pesquisar! Da mesma forma, um aplicativo não pode ter as cores do concorrente. ... Enfim, experiência e interface são multidisciplinares, envolvendo os aspectos da psicologia, neurociência, antropologia, ciência da computação, design gráfico, design industrial e ciência cognitiva. É preciso pesquisar, desenvolver empatia, e usar métricas. Sem pesquisa não há uma boa experiência do usuário e sem design não existirá uma boa interface, e sem os dois não existirá um produto inovador. As disciplinas não podem ser tratadas isoladamente. Seria tipo avião sem asa, fogueira sem brasa, futebol sem bola ou Piu-Piu sem Frajola! Como comentei no post anterior, sou apaixonada pela experiência do usuário e amo design. Sinceramente não consigo separar UX & UI e acredito que todo profissional de design já tenha os dois incorporados em seu trabalho, mesmo que não perceba. E minha filha tem um belo celular com câmera, com UI e UX dignos de 2016!",pt,249
10,1473971457,CONTENT SHARED,3367026768872537336,-3535274684588209118,-6495023147849651556,,,,HTML,http://br.blog.trello.com/melhore-a-comunicacao-na-empresa/,Seja esperto no trabalho: Melhore a comunicação na empresa com 12 robôs,"Seja Esperto no Trabalho: Melhore a Comunicação na Empresa Com 12 Bots ""Eu odeio ferramentas que me ajudam a trabalhar com mais eficiência e auxiliam a melhorar a comunicação na empresa"", disse absolutamente ninguém, em momento algum. Entram em cena seus próprios minions. Robôs (ou bots, em inglês) são incríveis para a produtividade. Eles podem automatizar tarefas que você teria que fazer por sua conta, deixando tempo livre para focar nas coisas que realmente precisam do seu toque de humanidade. Robôs também te livram daquela sobrecarga de novos apps. Em vez de baixar mais um aplicativo para fazer uma tarefa específica - e acabar com um monte de novas notificações para verificar o tempo todo - você pode turbinar a utilidade dos aplicativos que já tem. É a mesma coisa que personalizar seu uso do Trello com uma miscelânea de aplicativos de terceiros e Power-Ups . Robôs baseados em textos podem ajudar a melhorar a comunicação na empresa e com sua equipe, ou engajar os usuários nos aplicativos que você (e eles) já usam - aplicativos de chat como o Slack, redes sociais como Twitter e WhatsApp, e até mesmo com seu e-mail ou com o ecossistema do seu smartphone. Você também pode usar os robôs para se manter nos apps e plataformas que mais usa, diminuindo as chances de seu cérebro ""dar uma viajada"" com essa constante mudança de contexto . Tem robôs para quase tudo no trabalho e para todas as plataformas que você usa no dia a dia. Se a repercussão sobre isso já chegou até você, mas não teve uma chance de experimentar, aqui tem alguns robôs para você se cadastrar e começar a melhorar a comunicação na empresa, poupar tempo e trabalho imediatamente: Robôs de Comunicação na Empresa 1. Slackbot Evidentemente esta lista começa com o robô do Slack, o Salckbot , um dos melhores robôs da nossa seleção. O Slackbot poderia ser facilmente classificado como um ""assistente pessoal robótico"", mas uma vez que ele vive na plataforma de mensagens do Slack, sua função principal é ajudar você e sua equipe a melhorar a comunicação na empresa e trabalhar com mais produtividade. Tem um monte de maneiras de programar o Slackbot, e o Slack até fornece um API para criar ""Slack bots"" (não confunda com o próprio Slackbot) para rodar dentro do Slack. Você pode começar criando respostas automáticas personalizadas para aquelas perguntas mais comuns que te tomam tempo, tais como ""Qual a senha do wi-fi?"" ou ""Que horas é a nossa reunião semanal de equipe, mesmo?"". 2. Robô Standup Muitas empresas e equipes usam reuniões diárias de atualização para alinhar o time sobre o andamento dos projetos atuais e superar possíveis obstáculos juntos. Se você trabalha com sua equipe a distância , ou tem membros que usam horários diferentes, ter um robô que automaticamente inicia, toca e resume reuniões diárias de alinhamento pode soar com um sonho. O Standup gera atualizações automáticas no Slack que não exigem reuniões cara a cara em tempo real, todo dia ou toda semana. Sem mais desculpas para não melhorar a comunicação na empresa! 3. Drift 2.0 O novo Driftbot permite que se respondam consultas no site usando inteligência artificial para ajudar a direcionar as perguntas certas para as pessoas certas, melhorando a comunicação na empresa para que ninguém desperdice tempo nem esforços. A integração Drift + Slack permite falar com usuários do site sem ter que sair do Slack, poupando o tempo que se perde mudando de uma plataforma para outra. Robôs ajudando humanos a interagir com outros seres humanos é mais do que suficiente para aquecer as válvulas de um coração artificial. Assistentes Pessoais ""Robóticos"" 4. x.ai Conheça a x.ai Amy, a toda poderosa assistente pessoal robótica que agenda seus compromissos quando você manda um e-mail para ela. Quando você recebe um pedido de reunião, você pode simplesmente mandar um e-mail para amy@x.ai e a robô automaticamente faz o vai e volta de e-mails ""Eu estou disponível entre as 2:00 e as 4:00, nos dias ímpares, e nunca antes das 9:00 na segunda terça-feira"" para agendar as reuniões. Municiada com sua agenda de compromissos e preferência de horários, Amy faz toda programação de um jeito realmente muito legal. 5. Jarvis Esta corujinha adorável é seu novo companheiro, um robô para o Facebook Messenger que vai te mandar lembretes de tarefas baseado nos pedidos que você faz naturalmente, em linguagem comum. Se você prefere não falar em voz alta ao celular para dar instruções ao Siri, Google ou Cortana para lembrá-lo de atualizar prazos de vencimento em seus cartões Trello toda quinta às 10:00 - ou se você trabalha com Mídias Sociais, ou mesmo é alguém que passa muito tempo no Messenger - assistentes pessoais baseados em texto podem fazer uma tonelada de sentido. 6. WorkLife Para muita gente, principalmente quem trabalha a distância e a galera de tecnologia, abrir o Slack é uma das primeiras coisas que você faz quando vai começar a trabalhar. O Robô WorkLife Slack garante que você não tenha que abrir seu aplicativo de agenda ou seus e-mails para saber onde você vai e com quem você tem reuniões naquele dia. O robô te manda toda manhã um resumo de suas próximas reuniões, inclusive tudo que precisa saber sobre qual linha usar para um ""conference call"" e os assuntos que serão tratados. Esse é o tipo de coisa que eu gosto de ver em um robô! Robôs de Dados e Desenvolvimento 7. Hubot O Hubot começou a vida como um robô interno do GitHub, mas agora está disponível em código aberto. Anunciado como ""o robô da sua empresa"", ele vem com alguns scripts pré-programados para ajudar em coisas como tradução e postagem de imagens, mas também pode ser personalizada com uma tonelada de scripts criados colaborativamente ou que você mesmo codificou. 8. Baremetrics bot Se você ama métricas e construir empresas SaaS , você provavelmente ama Baremetrics - e você provavelmente também vai amar o robô Métricas Baremetrics e Slack ! Esta integração envia informações cruciais sobre os clientes diretamente para o Slack, assim você nunca vai ter que abrir o Baremetrics em separado para verificar novas inscrições, LTV (Life Time Value), MRR (Receita Recorrente Mensal) ou taxas de churn (cancelamento) novamente. 9. Statsbot Como as melhores invenções, o Statsbot surgiu do desejo de seus criadores de solucionar um problema próprio. Eles se viam constantemente indo aos seus painéis de controle do Mixpanel , tirando uma foto de um gráfico ou tabela e depois anexando no Slack em resposta a perguntas ou para explicar uma opinião para a equipe. Então eles criaram o Statsbot, um robô de métricas que mantém você e sua equipe atualizados sobre as métricas do Google Analytics, Mixpanel e mais, direto no Slack, melhorando muito a comunicação na empresa. Robôs Para Produtividade Pessoal e da Equipe 10. Tomatobot O método de Pomodoro é um jeito bem legal de dividir seu dia em períodos mais produtivos e focados. Com tantas pessoas adotando essa ferramenta de trabalho baseada no tempo, não é de se admirar que haja um robô para isso. Apropriadamente chamado de Robô de Produtividade Tomatobot , ele envia seus avisos de tempo diretamente para o seu canal do Slack. Você também pode identificar mensagens específicas como distrações ou digitar o que terminou - no final de cada Pomodoro, o Tomatobot vai te mostrar as mensagens marcadas como distrações para você poder vê-las e também tudo que conseguiu fazer. 11. Ace Quantos galhos um castor poderia quebrar para você se ele fosse um robô que gerencia inteligentemente sua produtividade no Slack, como o Robô de Produtividade Ace pode fazer? Este inteligente robozinho (e seu avatar de castor) acompanha despesas, tarefas, votações e muito mais com facilidade, tudo no Slack. Pauleira esse negócio, hein? 12. Trello para Slack Se você é um usuário ativo tanto do Slack quanto do Trello, você provavelmente não conseguiria sequer contar quantas vezes por dia você transfere informação de um para o outro. Trello para Slack permite que você crie instantaneamente cartões Trello de dentro dos canais Slack (até com GIFs de gatinhos no meio do post!), atualizar cartões, anexar cartões a conversas, incluir pessoas em cartões e muito mais. Mais do que apenas comandos, este robô fornece vários botões para tarefas comuns do Trello, assim você pode ir fazendo o que precisa direto, sem mudar de ferramenta. Deu para entender agora? Com uma legião de robozinhos (seus minions!), só esperando para melhorar a comunicação na empresa, você vai ser muito mais produtivo, eficiente e cada vez mais admirado por todos! Postagens Relacionadas",pt,247
11,1464708954,CONTENT SHARED,2857117417189640073,22763587941636338,8000922562339244508,,,,HTML,https://sprintstories.com/running-gv-sprints-inside-corporates-learn-from-my-mistakes-526f67c1960f?gi=e381d0ad2b1,Running GV sprints inside corporates - learn from my mistakes - Sprint Stories,"Running GV sprints inside corporates - learn from my mistakes GV (Google Ventures) has just released Sprint , a book about their design sprint process. This seems like a good time to share what I've learned from facilitating more than 30 sprints with corporates here in New Zealand. I hope my experience will help you avoid some of the pitfalls. Where I've learned what I've learned I'm a graphic, UI, UX, interaction, product designer/manager ... I really don't know what to call myself anymore. After several years as a lead designer, I worked as a UX consultant from 2012 until the end of 2015. Through this work, I quickly realized that consulting was broken. We could deliver great work that the client loved, but when we walked out the door everything went back to normal. Our ideals of lean thinking, rapid iteration and user feedback walked out with us. We started experimenting with working on-site with the client running, Lean UX and GV sprints. Finally, we started making a difference ... but there were problems... Running a sprint on an obstacle course Running the sprint process was very challenging in corporate environments - like running a sprint on an obstacle course. Many of the problems we came across are interrelated and point to issues that are common, if not universal, to 'corporates'. I also made my own mistakes and, learning from it all, I've found better ways. The issues I faced, the mistakes I made, and what I learned... 1. The war surrounding the War Room The drama that occurs when you take over a space in a corporate office for more than an hour, let alone a week, can increase to stunning levels. Faced with this loss of precious meeting-room space, I've seen other teams turn hostile, bookings sabotaged and angry people standing over a poor PA's desk, demanding to know why the room was fully booked. I've seen someone literally stomping mad, pointing at us through the glass wall and ranting furiously to the colleague beside them. (We just kept our heads down and kept drawing.) Solutions Here's some of things I did to reduce the drama: Straight to the top . I asked the CEO's PA to book the meeting room in the CEO's name. No one complained. Hide it. We removed the room from the booking system and covered up the glass wall with large foam boards. Move it. Teams have favorite meeting rooms. If you book it for a week you'll annoy them for that week. If it stretches into two, then drama is imminent. Instead, move to a different meeting room each week. Avoid the drama . Don't use a bookable meeting room. Find a space with at least one wall you can plant yourself beside. Get creative ... you're likely in a big building with all sorts of space. 2. Attendance chaos You've got a War Room, now you need a team. The Decider can make cameos, but the rest need to be available close to full-time for five days. In some companies you'll work with a passionate team who have been given permission to drop everything else. Freed of their obligations, they walk in with a clear mind and tackle the sprint with enthusiasm. But in other companies the team has only been encouraged to take part. Without that real permission, their to-do list, inbox and regular meetings are forever on their mind. Despite working on critical business problems, and even with the CEO's blessing, they will ask to pop in and out and attend other meetings, which is disruptive to both the team and the process. And then there are the ones who attend, but are forever focused on their laptop (that they refuse to give up)... Despite briefings and emphasizing this commitment, I found people likened it to a long meeting - 'Surely they don't need me the whole time?' Solutions If you want people full-time for five days straight you might have to compromise. Break it up . Instead of five days in a row, try for five days over a few weeks. Don't run a sprint for less than seven hours a day though, as if it's shorter people tend to not be entirely present as their mind is busy preparing for the rest of their day. Compress it. For one client I compressed the first three days of the sprint into two consecutive days. I then prepared the prototypes by myself and got the team together for an hour to provide feedback. After making the changes, I got the team to observe the user studies. By showing the clients how the process worked, they became more interested and invested, with the result that they actually started backfilling people so the team could truly spend five days straight on a sprint. Both of these are not ideal, but if it's the difference between running most of the process or none of it ... compromise this little bit. 3. Saboteurs in plain sight Even Daniel Burka , a design partner at GV, admits he was a little skeptical about the process when he did his first sprint - but after just one it all made sense. Each group that walks into the War Room will have a mix of people: those who understand the principles and are thrilled to be trying something different; those who are on the fence, like Daniel; and those who actually don't want to be there. It is simply counterproductive having people who don't want to be there, no matter how useful their subject-matter expertise. They will clash with you on every activity you lead the group in, because they don't want to do it. They will question the process, and will re-litigate and debate every point. Solutions 1. Ask them to opt in . Insist you meet all the attendees one-on-one in the weeks before the sprint and have a quick chat. Cover the process, the way the team works, and why the company is trying it out. Ask them to choose whether to take part or not, but also to agree to the way they'll work. Most people I've warmed up like this have entered the sprint and at least given it a go. 2. Let them be experts. Instead of booking them in for the whole week, instead get them to pop in on Monday so the team can interview them. Tease out their knowledge and then release them back into the wild. 4. Responsibility avoidance In the first sprints we ran, we didn't realize we were making a fundamental mistake: when you're responsible for facilitating a process, and coaching/training people in that process, you should not also be responsible for a deliverable. One key concept of the sprint process is to set time constraints to propel the team forward. However, negative behaviors such as re-litigation, too much talking and not following agreed principles will limit progress. This usually happens because the team members don't feel that they're actually responsible for delivering a result. They instead feel that they're there to be subject-matter experts, or simply take part. At the end of one of these early sprints, due to this slow progress the resulting prototype that was tested was not ready, and therefore the tests were not conclusive. Because I was technically responsible for delivering a result, I was then open to criticism, and so was the process. Solutions Do not agree to deliver anything. You are facilitating a process, but the team as a whole must be responsible for the outcome . There are some ways you can encourage this shared responsibility: Principles . Print off key principles that the team should agree to at the start of the sprint and stick them to the wall. Remind the team of these principles whenever they waiver. Everyone's in until the end . It's easy for prototyping to fall onto the people who can build a prototype. This often feels like a good time for others to run off and tackle their inboxes, leaving the deadline responsibility to one or two people. But instead, everyone should stay in the room. The rest of the team can work on other things if they have to, but if the prototypers ask for anything - to source images, write copy, even get coffee - the others should help them. Manage saboteurs in hiding . Some people may say all the right things and start off taking part, but later show signs that they are not compelled by the looming deadline. This often occurs when someone has felt that the agreed direction doesn't match their preference. Their behavior can become disruptive, usually through debate and re-litigation. At its worst, others join their cause and consensus is lost. As the facilitator, it's your job to remind them of the agreed principles and ask the Decider to reiterate the decisions. They then need to agree to the principles again and continue, or leave the room. 5. The corporate immune system and ambiguity The corporate immune system has been well-documented . Simply put, the 'body' of the corporate doesn't like change and the individuals responsible for it - especially if they're outsiders - and fights against it. The issues above are symptoms of this, but I found the immune system to be visible in many other ways. For example: The Decider was influenced mid-sprint by politics outside the room and wanted to re-litigate everything. We were blocked mid-sprint from talking to five customers for our user studies because a team wanted to control 'the message' the customers were hearing. A team decided the way we were working was not the [CompanyName] way. A team felt that the sprint team were making them look bad by uncovering customer problems that they were responsible for. They became very hostile. Then there is ambiguity . This is totally what you learn as you get older as a designer. I've been doing this for almost 20 years. And the older you get and the more you do this, the more you get confident that you just don't know. And then you look for a process where you can learn what's working and what's not working more quickly. That's why I like sprints so much. It takes off that weight of needing to be right. It's okay, you don't know, just admit you don't know. That's fine. - Daniel Burka Ambiguity is fine. That's what the process is for. Teams should embrace ambiguity, ask good questions, examine the problem, and ensure they're testing and learning the right things to remove ambiguity as fast as possible. Each sprint builds confidence and removes risk. However, in most corporates ambiguity is seen as weakness. These companies train people that they should always have the answer. People are even rewarded for coming up with plausible-sounding solutions quickly, even when ignoring potentially catastrophic assumptions. (Watch Claudia Batten's great short talk on Solutions Allies in high places . As one person, you can't begin to tackle an entire organization's culture. Ask the CEO (or the most senior person you have access to) to tackle these issues head on, and do your best to keep the sprint team focused on their deadlines. Show your progress . Invite teams in to see how you're working and present what has been learned so far. Results, progress, data and transparency are your best defense against the immune system. Get an internal spokesperson. If you're an outsider that has come in to do the facilitating, do not become the voice of the process and progress. Get the team members from inside the company to present to the rest - this will have more impact with the skeptics. Get out. When you try to move a project quickly inside one of these companies you'll discover these obstacles and behaviors. Changing individual human behaviors is hard, changing a group culture is insurmountable by a sprint facilitator. If the above options aren't working and the culture is too toxic to let the team deliver any results, walk away. embracing the squiggly line .) Even during show and tell at the end of the sprint, I've heard someone comment that it was 'five days wasted' as they already had the solution. At least when they're brash enough to say it out loud the team could provide evidence to defend themselves; however, in most cases this opinion is only shared away from the team. Like nothing else, ambiguity encourages the immune system to poison attempts at change. The sprint team is the key As a facilitator, you have to focus on your sprint team and can't get involved in any drama occurring outside of the room - even if there's foot-stomping and fury. It's the people you let inside the room that will make or break the process. But, because the process represents change, this can lead to uncertainty, even within the sprint team. Again, results, progress, data and transparency are your best defense. But to comfort the team from day one so you get those results, they need to be prepared. Sprint warm-ups This is the process I used to warm up the team for my last series of sprints to guarantee the best results: I interviewed several stakeholders early on and got a sense of some of the internal issues the company was struggling with. I sat down with each sprint participant and talked about a range of issues and got them to identify the ones that they had encountered. I talked them through the sprint process, going into detail in places where it combated the issues they had identified. I asked them whether they felt it was worth experimenting with the process. They always said yes. I repeated it with the group at the start of the sprint, focusing on the issues specific to that company, and how the process can help. Throughout the sprint I asked for permission to move onto each next step to avoid any tension between me as facilitator and the team. I created an atmosphere where the team corrected each other when people broke agreed principles. I focused on coaching individuals rather than the group as a whole. If someone seemed to be struggling I'd ensure I talked to them one on one. The corporate experiment As you will have gathered, I had some frustrating experiences while running sprints with corporate clients. In some cases, despite learning so much and the prototypes resulting in great customer feedback, projects were cancelled and everyone moved on. The sprint process was not designed with the corporate obstacle course in mind, and for a while I felt it could never work. However, I've come out the other side and I truly believe this process and its underlying principles are the key, even in these organizations. If I was a CEO of a company struggling to innovate or solve critical problems, I would encourage a group to run this process as soon as possible. Not to deliver a result, but to highlight all the obstacles that the leadership had become blind to. If the leaders are determined and don't hesitate, they may be able to clear the obstacles in time for the sprint team to achieve something big ... in just five days .",en,241
12,1469487944,CONTENT SHARED,8224860111193157980,6013226412048763966,5651952480198335454,,,,HTML,http://www.jornaldoempreendedor.com.br/destaques/inspiracao/psicologa-de-harvard-diz-que-as-pessoas-julgam-voce-em-segundos-por-esses-criterios/,Psicóloga de Harvard diz que as pessoas julgam você em segundos por esses critérios | Jornal do Empreendedor,"As pessoas avaliam você em segundos, mas o que exatamente eles estão avaliando? A professora de Harvard Business School, Amy Cuddy vem estudando as primeiras impressões ao lado dos colegas psicólogos Susan Fiske e Peter Glick por mais de 15 anos, e descobriu padrões nessas interações. Em seu novo livro, ""Presença"", Cuddy diz que as pessoas respondem rapidamente duas perguntas quando eles te encontram pela primeira vez: Posso confiar nesta pessoa? Eu posso respeitar esta pessoa? Os psicólogos referem-se a estas dimensões como cordialidade e competência, respectivamente, e, idealmente, você quer ser percebido tendo ambos. Curiosamente, Cuddy diz que a maioria das pessoas, especialmente em um contexto profissional, acreditam que a competência é o fator mais importante . Afinal, eles querem provar que eles são inteligentes e talentosos o suficiente para lidar com o seu negócio. Mas, na verdade a cordialidade, ou confiabilidade, é o fator mais importante na forma como as pessoas avaliam você. ""De uma perspectiva evolucionária"", diz Cuddy, ""é mais crucial para a nossa sobrevivência saber se uma pessoa merece a nossa confiança."" Faz sentido quando você considera que para os homens das cavernas era mais importante descobrir se seu companheiro estava lá para matá-lo e roubar todos os seus bens ou se ele era competente o suficiente para construir um bom fogo com você. O novo livro de Cuddy explora formas para nos sentirmos mais confiantes. O livro já é best-seller na Amazon dos EUA e está aqui . Enquanto a competência é altamente valorizada, Cuddy diz que ela é avaliada apenas depois que a confiança é estabelecida. E, que se concentrar demais em exibir a sua força pode sair pela culatra. A competência é altamente valorizada mas é avaliada apenas depois que a confiança é... Click To Tweet Cuddy diz que estudantes de MBA estão muitas vezes tão preocupados em parecer inteligentes e competentes que isso pode levá-los a ignorar eventos sociais, não pedir ajuda, e geralmente parecer inacessível. ""Uma pessoa calorosa, confiável que também é forte provoca admiração, mas só depois que você estabelece a confiança é que sua força se torna um dom e não uma ameaça."" Estes overachievers podem se frustrar ao não receberem a oferta de emprego porque ninguém os conheceu melhor para confiar neles como pessoas. ""Se alguém que você está tentando influenciar não confiar em você, você não vai chegar muito longe. Na verdade, você pode até provocar suspeitas porque você parecer apenas um grande manipulador"", diz Cuddy. Amy fez um TED Talk muito interessante e está legendado abaixo: Artigo da Business Insider .",pt,236
13,1473105755,CONTENT SHARED,7507067965574797372,-4028919343899978105,-3666565354944070559,,,,HTML,http://gizmodo.uol.com.br/disputa-tabs-vs-espacos/,Um bilhão de arquivos mostram quem vence a disputa tabs vs. espaços entre programadores,"Esta é uma das maiores batalhas já travadas entre os programadores: você deveria usar a tecla tab ou cinco espaços ao recuar linhas em seu código-fonte? * Como aprender programação? * Aprenda mais sobre programação usando este baralho com trechos de código O debate, em última análise, se resume à forma como o código-fonte é exibido ao ser editado. A razão pela qual desenvolvedores se irritam é que o código fica desajeitado se o mesmo método não for usado em todo o arquivo. Isto pode se tornar especialmente complicado quando várias pessoas trabalham no mesmo projeto. O debate já se arrasta há tanto tempo que os programadores se referem a outros como ""gente de tab"" e ""gente de espaço"". Isso foi até mencionado em um episódio recente da série Silicon Valley , da HBO: Richard prefere tabs e fica irritado em ver Winnie - que trabalha para o Facebook - usando espaços. O breve relacionamento acaba por causa disso! O chileno Felipe Hoffa, que trabalha para o Google, decidiu encontrar um vencedor para este debate. Assim, ele analisou 1 bilhão de arquivos entre 14 diferentes linguagens de programação para descobrir qual método é realmente mais popular e, em seguida, publicou os resultados em um post no Medium . Os dados vieram de arquivos do GitHub armazenados no BigQuery . Ele removeu duplicatas e arquivos com menos de 10 linhas de código. O desenvolvedor também deu um voto por arquivo: assim, se o desenvolvedor usou abas e espaços, o voto foi para o método usado mais frequentemente. Por fim, os 400.000 repositórios principais foram classificados pelo número de estrelas que receberam no GitHub entre janeiro e maio de 2016. Eis os resultados: Como você pode notar a partir dos dados, o vencedor aqui são os espaços. Em toda grande linguagem de programação (fora C), os espaços foram mais utilizados nos arquivos mais populares no GitHub. Esta evidência é a mais definitiva em revelar se tabs ou espaços são mais populares no código-fonte. Mas por quê? Alguns dirão que é simples: os espaços serão exibidos da mesma forma em qualquer hardware ou software de visualização de texto, e são mais visíveis do que tabs. Enquanto isso, tabs são mais organizados e geram código-fonte mais enxuto. Sinto que o debate espaços vs. tabs ainda está longe de acabar. Imagens por HBO e Medium/@hoffa",pt,233
14,1470418766,CONTENT SHARED,-6156751702010469220,3302556033962996625,769925043682591828,,,,HTML,https://blog.codinghorror.com/the-broken-window-theory/,The Broken Window Theory,"In a previous entry , I touched on the broken window theory. You might be familiar with the Pragmatic Progammers' take on this : Don't leave ""broken windows"" (bad designs, wrong decisions, or poor code) unrepaired. Fix each one as soon as it is discovered. If there is insufficient time to fix it properly, then board it up. Perhaps you can comment out the offending code, or display a ""Not Implemented"" message, or substitute dummy data instead. Take some action to prevent further damage and to show that you're on top of the situation. We've seen clean, functional systems deteriorate pretty quickly once windows start breaking. There are other factors that can contribute to software rot, and we'll touch on some of them elsewhere, but neglect accelerates the rot faster than any other factor. That's excellent advice for programmers, but it's not the complete story. The broken window theory is based on an Atlantic Monthly article published in 1982. It's worth reading the article to get a deeper understanding of the human factors driving the theory: Second, at the community level, disorder and crime are usually inextricably linked, in a kind of developmental sequence. Social psychologists and police officers tend to agree that if a window in a building is broken and is left unrepaired, all the rest of the windows will soon be broken. This is as true in nice neighborhoods as in rundown ones. Window-breaking does not necessarily occur on a large scale because some areas are inhabited by determined window-breakers whereas others are populated by window-lovers; rather, one unrepaired broken window is a signal that no one cares, and so breaking more windows costs nothing. (It has always been fun.) Philip Zimbardo, a Stanford psychologist, reported in 1969 on some experiments testing the broken-window theory. He arranged to have an automobile without license plates parked with its hood up on a street in the Bronx and a comparable automobile on a street in Palo Alto, California. The car in the Bronx was attacked by ""vandals"" within ten minutes of its ""abandonment."" The first to arrive were a family--father, mother, and young son--who removed the radiator and battery. Within twenty-four hours, virtually everything of value had been removed. Then random destruction began--windows were smashed, parts torn off, upholstery ripped. Children began to use the car as a playground. Most of the adult ""vandals"" were well-dressed, apparently clean-cut whites. The car in Palo Alto sat untouched for more than a week. Then Zimbardo smashed part of it with a sledgehammer. Soon, passersby were joining in. Within a few hours, the car had been turned upside down and utterly destroyed. Again, the ""vandals"" appeared to be primarily respectable whites. Untended property becomes fair game for people out for fun or plunder and even for people who ordinarily would not dream of doing such things and who probably consider themselves law-abiding. Because of the nature of community life in the Bronx--its anonymity, the frequency with which cars are abandoned and things are stolen or broken, the past experience of ""no one caring""--vandalism begins much more quickly than it does in staid Palo Alto, where people have come to believe that private possessions are cared for, and that mischievous behavior is costly. But vandalism can occur anywhere once communal barriers--the sense of mutual regard and the obligations of civility--are lowered by actions that seem to signal that ""no one cares."" There's even an entire book on this subject . What's fascinating to me is that the mere perception of disorder-- even with seemingly irrelevant petty crimes like graffiti or minor vandalism -- precipitates a negative feedback loop that can result in total disorder: We suggest that ""untended"" behavior also leads to the breakdown of community controls. A stable neighborhood of families who care for their homes, mind each other's children, and confidently frown on unwanted intruders can change, in a few years or even a few months, to an inhospitable and frightening jungle. A piece of property is abandoned, weeds grow up, a window is smashed. Adults stop scolding rowdy children; the children, emboldened, become more rowdy. Families move out, unattached adults move in. Teenagers gather in front of the corner store. The merchant asks them to move; they refuse. Fights occur. Litter accumulates. People start drinking in front of the grocery; in time, an inebriate slumps to the sidewalk and is allowed to sleep it off. Pedestrians are approached by panhandlers. At this point it is not inevitable that serious crime will flourish or violent attacks on strangers will occur. But many residents will think that crime, especially violent crime, is on the rise, and they will modify their behavior accordingly. They will use the streets less often, and when on the streets will stay apart from their fellows, moving with averted eyes, silent lips, and hurried steps. ""Don't get involved."" For some residents, this growing atomization will matter little, because the neighborhood is not their ""home"" but ""the place where they live."" Their interests are elsewhere; they are cosmopolitans. But it will matter greatly to other people, whose lives derive meaning and satisfaction from local attachments rather than worldly involvement; for them, the neighborhood will cease to exist except for a few reliable friends whom they arrange to meet. Programming is insanely detail oriented, and perhaps this is why: if you're not on top of the details, the perception is that things are out of control, and it's only a matter of time before your project spins out of control. Maybe we should be sweating the small stuff .",en,221
15,1487127440,CONTENT SHARED,1469580151036142903,-4465926797008424436,1603046601233039757,"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.37 Safari/537.36",SP,BR,HTML,https://dev.to/raddikx/dont-document-your-code-code-your-documentation,Don't document your code. Code your documentation.,"This is one of the great discussions among developers: document or not document your code? Is it worth writing documentation in your code? I thought this topic was completely overcome and it was clear that, except some few occasions (implementing a public API), documentation was not necessary. Until I saw a code review where the reviewer pointed out the lack of documentation as an issue. Really? I was one of those who used to document my code... or at least I tried. I was so convinced that code had to be documented. As a backup or reminder for my future myself or any other developer luck enough to end up in my code. Although I always realized it was always out of date. And by then, I already wondered: what is the purpose of documenting the code if the documentation is always outdated? Until several years ago I read the book Clean Code . I saw it ""crystal clear"", there is no need to document your code if you code your documentation. With this I mean to use meaningful variable and method names. If the name of the member already tells you the information that is keeping and the name of the method tells you what the method is doing you can end up reading the code without the need to figure out or document what your code is doing. Extract as much code as you can to methods. Even if you end up having a method with only 3 or 4 lines. Each method should do one thing and only one thing. And the name must explain what it does. Each member of a class must have a name that only reading it you know which information you can find there. Same for variables and input parameters. Following this simple steps you can have a code you can read, having the documentation right in the same code. Yes, I know, there are those times you have to implement code with a complex algorithm or you are copying a code you found on Internet which might be complex, you might not understand and you might not extract in simple and meaningful methods. Yes, there are always exception. What do you think? Do you document or write the documentation in your code? This post was originally published in Medium",en,209
16,1477329558,CONTENT SHARED,-4333957157636611418,-7496361692498935601,-4955259521885105809,"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",SP,BR,HTML,https://business.stackoverflow.com/blog/why-programmers-want-private-offices,Why Programmers Want Private Offices,"Ask any of your employees or coworkers what they think makes a workplace attractive and you're bound to get a variety of results. Some may refer to the benefits, while others are more concerned about the standard working hours. Developers, however, often will bring up the physical work environment when asked this question. But why? The type of work that developers do day in and day out requires a space that's noiseless with minimal interruptions. Distractions such as phone calls, chatty coworkers, or constant questions from colleagues completely interrupt the developer's flow of work and kill their productivity. For them to perform optimally, they need space and quiet. It's as simple as that. Let's start off with a few findings from various workplace productivity studies. In the book Peopleware , writers Tom DeMarco and Timothy Lister discuss their public productivity survey, which showed that ""The top quartile of participants, those who did the exercise most rapidly and effectively, worked in a space that was substantially different from that of the bottom quartile. The top performers' space was quieter, more private, better protected from interruption, and larger."" Additionally, IBM and architect Gerald McCue studied the work habits of developers in their current workspaces, as well as mock-ups of proposed (more private) workspaces. They found that the minimum accommodation for each developer would be ""100 square feet of dedicated space per worker, 30 square feet of work surface per person, and noise protection in the form of enclosed offices."" Why Do Private Offices Matter for Job Candidates? When a developer hears about a new job (whether they applied themselves or were passively recruited), they usually have the luxury of being picky. Since there's so much demand for them - multiple jobs for every unique developer - they want to ensure they are making the right choice by choosing a company that fits their values and needs. For many developers, one of those values is a top-notch private workspace. Our CEO Joel Spolsky said it best -- ""Put yourself in the job candidate's shoes. Company number 1 shows you a big crowded room, with a bunch of desks shoved in tightly, lots of marketing guys shouting on the phone next to the programmers and a bunch of sales jocks shouting tasteless jokes. Company number 2 shows you through a quiet hallway, a sunlit, plush office with a window and a door that closes. All else being equal, which job are you going to take?"" But What If We Don't Have Permission/Room/Budget for Private Offices? When companies do a cost/benefit analysis for improving the working space, they often focus too much on the cost. This is likely because the costs are easy to calculate, while the benefits are not. The potential benefits, which could be things like increased productivity, reduced turnover rate, increased revenue, often would outweigh the associated costs if calculated properly. How does your company calculate these benefits? That's the million-dollar question. According to Peopleware , ""the entire cost of workspace for one developer is a small percentage of the salary paid to the developer. In general, it varies in the range from 6 to 16 percent. For a programmer working in company-owned space, you should expect to pay $15 directly to the worker for every dollar you spend on space and amenities. If you add the cost for employee benefits, the total investment in the worker could easily be 20 times the cost of his or her workplace."" While not every company can afford to implement private offices for their developers (especially startups with a small budget), it's certainly not impossible. Lots of companies have invested in their developers and cut costs in other areas to make it work, giving them a competitive advantage in the technical hiring market.",en,192
17,1464879718,CONTENT SHARED,880612740433495828,6013226412048763966,3831181614891772761,,,,HTML,http://vocerh.uol.com.br/noticias/entrevista/o-que-voce-deve-fazer-para-se-tornar-um-lider-melhor.phtml,O que você deve fazer para se tornar um líder melhor?,"Para ser um grande coach, você deve fazer mais perguntas em vez de tentar dar todas as respostas Marcelo Nóbrega* Bom líder: executivos em posição gerencial sentem-se compelidos a rapidamente orientar suas equipes no que e como fazer | Crédito: Pexels O segredo de todo bom líder é ter uma equipe de sucesso - é o que dizem nove entre dez gurus da administração. E como armar uma equipe de sucesso? Dando coaching. E como ser um grande coach e fazer coaching bem feito? A resposta é surpreendentemente simples. Você deve fazer mais perguntas em vez de tentar dar todas as respostas. É o que ensina Michael Bungay Stainer no livro The Coaching Habit (ainda sem tradução para o português). Michael é consultor de empresas, coach e autor de vários livros. Em suas próprias palavras, seu trabalho é ajudar executivos a causar maior impacto trabalhando menos. De forma Inteligente, sagaz, articulada e bem-humorada, Michael apresenta as sete perguntas que transformarão a maneira como você lidera sua equipe. Executivos em posição gerencial sentem-se compelidos a rapidamente orientar suas equipes no que e como fazer. Se você ocupa uma posição gerencial, tenho certeza de que sua reação quando um colaborador lhe apresenta um problema é tentar resolvê-lo, dar conselhos, agir e apagar o incêndio. Afinal, você é o chefe e sabe mais, certo? O que você não percebe é que, agindo desta maneira, se torna um gargalo para o desempenho e aprendizado da equipe. Coaching e feedback frequentes são mais poderosos do que as avaliações de desempenho tradicionais que são realizadas apenas uma ou duas vezes por ano. Diante de tantos cursos, textos, propagandas, certificações etc ... é fácil ficar confuso com o que é coaching. Que tal começar lendo este livro? Coaching não é dar conselhos ou resolver problemas, mas saber fazer as perguntas certas para ajudar o coachee a encontrar sua maneira de superar um obstáculo. Dedique mais tempo a ouvir para que encontre ele mesmo suas soluções. O resultado valerá a pena. E você trabalhará menos. Como? Comece perguntando: ""Porque você veio me procurar?"" - assim você define o foco da conversa. Siga com: ""O que mais?"" - explore um pouco pois raramente a primeira resposta é a verdadeira razão. Depois foque novamente: ""Qual seu verdadeiro desafio?"" - a real dificuldade ficará explícita e, se houver, o seu papel na solução também. Esse é apenas o início de uma fórmula simples para transformar qualquer conversa. Aprenda com The Coaching Habit: coaching é uma atitude. E você pode ser coach de sua equipe, pares, chefe e de você mesmo. * Este artigo é de autoria de Marcelo Nóbrega (diretor de recursos humanos da Arcos Dourados) e não representa necessariamente a opinião da revista",pt,191
18,1467123962,CONTENT SHARED,-5002383425685129595,-3390049372067052505,2471338745689678750,,,,HTML,http://www.mckinsey.com/global-themes/leadership/changing-change-management,Changing change management,"Research tells us that most change efforts fail. Yet change methodologies are stuck in a predigital era. It's high time to start catching up. Change management as it is traditionally applied is outdated. We know, for example, that 70 percent of change programs fail to achieve their goals, largely due to employee resistance and lack of management support. We also know that when people are truly invested in change it is 30 percent more likely to stick. While companies have been obsessing about how to use digital to improve their customer-facing businesses, the application of digital tools to promote and accelerate internal change has received far less scrutiny. However, applying new digital tools can make change more meaningful-and durable-both for the individuals who are experiencing it and for those who are implementing it. The advent of digital change tools comes at just the right time. Organizations today must simultaneously deliver rapid results and sustainable growth in an increasingly competitive environment. They are being forced to adapt and change to an unprecedented degree: leaders have to make decisions more quickly; managers have to react more rapidly to opportunities and threats; employees on the front line have to be more flexible and collaborative. Mastering the art of changing quickly is now a critical competitive advantage. For many organizations, a five-year strategic plan-or even a three-year one-is a thing of the past. Organizations that once enjoyed the luxury of time to test and roll out new initiatives must now do so in a compressed period while competing with tens or hundreds of existing (and often incomplete) initiatives. In this dynamic and fast-paced environment, competitive advantage will accrue to companies with the ability to set new priorities and implement new processes quicker than their rivals. The power of digital to drive change Large companies are increasingly engaged in multiple simultaneous change programs, often involving scores of people across numerous geographies. While traditional workshops and training courses have their place, they are not effective at scale and are slow moving. B2C companies have unlocked powerful digital tools to enhance the customer journey and shift consumer behavior. Wearable technology, adaptive interfaces, and integration into social platforms are all areas where B2C companies have innovated to make change more personal and responsive. Some of these same digital tools and techniques can be applied with great effectiveness to change-management techniques within an organization. Digital dashboards and personalized messages, for example, can build faster, more effective support for new behaviors or processes in environments where management capacity to engage deeply and frequently with every employee is constrained by time and geography. Digitizing five areas in particular can help make internal change efforts more effective and enduring. 1. Provide just-in-time feedback The best feedback processes are designed to offer the right information when the recipient can actually act on it. Just-in-time feedback gives recipients the opportunity to make adjustments to their behavior and to witness the effects of these adjustments on performance. Consider the experience of a beverage company experiencing sustained share losses and stagnant market growth in a highly competitive market in Africa. The challenge was to motivate 1,000-plus sales representatives to sell with greater urgency and effectiveness. A simple SMS message system was implemented to keep the widely distributed sales reps, often on the road for weeks at a time, plugged into the organization. Each rep received two to three daily SMS messages with personalized performance information, along with customer and market insights. For example, one message might offer feedback on which outlets had placed orders below target; another would alert the rep to a situation that indicated a need for increased orders, such as special events or popular brands that were trending in the area. Within days of implementing the system, cross-selling and upselling rates increased to more than 50 percent from 4 percent, and within the first year, the solution delivered a $25 million increase in gross margin, which helped to swing a 1.5 percent market-share loss into a 1 percent gain. 2. Personalize the experience Personalization is about filtering information in a way that is uniquely relevant to the user and showing each individual's role in and contribution to a greater group goal. An easy-to-use system can be an effective motivator and engender positive peer pressure. This worked brilliantly for a rail yard looking to reduce the idle time of its engines and cars by up to 10 percent. It implemented a system that presented only the most relevant information to each worker at that moment, such as details on the status of a train under that worker's supervision, the precise whereabouts of each of the trains in the yard, or alerts indicating which train to work on. Providing such specific and relevant information helped workers clarify priorities, increase accountability, and reduce delays. 3. Sidestep hierarchy Creating direct connections among people across the organization allows them to sidestep cumbersome hierarchal protocols and shorten the time it takes to get things done. It also fosters more direct and instant connections that allow employees to share important information, find answers quickly, and get help and advice from people they trust. In the rail-yard example, a new digital communications platform was introduced to connect relevant parties right away, bypassing middlemen and ensuring that issues get resolved quickly and efficiently. For example, if the person in charge of the rail yard has a question about the status of an incoming train, he or she need only log into the system and tap the train icon to pose the question directly to the individuals working on that train. Previously, all calls and queries had to be routed through a central source. This ability to bridge organizational divides is a core advantage in increasing agility, collaboration, and effectiveness. 4. Build empathy, community, and shared purpose In increasingly global organizations, communities involved in change efforts are often physically distant from one another. Providing an outlet for colleagues to share and see all the information related to a task, including progress updates and informal commentary, can create an important esprit de corps . Specific tools are necessary to achieve this level of connectivity and commitment. Those that we have seen work well include shared dashboards, visualizations of activity across the team, ""gamification"" to bolster competition, and online forums where people can easily speak to one another (for example, linking a Twitter-like feed to a work flow or creating forums tied to leaderboards so people can easily discuss how to move up in the rankings). This approach worked particularly well with a leading global bank aiming to reduce critical job vacancies. The sourcing team made the HR process a shared experience, showing all stakeholders the end-to-end view-dashboards identifying vacancies; hiring requisitions made and approved; candidates identified, tested, and interviewed; offers made and accepted; and hire letters issued. This transparency and openness built a shared commitment to getting results, a greater willingness to deliver on one's own step in the process, and a greater willingness to help one another beyond functional boundaries. 5. Demonstrate progress Organizational change is like turning a ship: the people at the front can see the change but the people at the back may not notice for a while. Digital change tools are helpful in this case to communicate progress so that people can see what is happening in real time. More sophisticated tools can also show individual contributions toward the common goal. We have seen how this type of communication makes the change feel more urgent and real, which in turn creates momentum that can help push an organization to a tipping point where a new way of doing things becomes the way things are done. Digital tools and platforms, if correctly applied, offer a powerful new way to accelerate and amplify the ability of an organization to change. However, let's be clear: the tool should not drive the solution. Each company should have a clear view of the new behavior it wants to reinforce and find a digital solution to support it. The best solutions are tightly focused on a specific task and are rolled out only after successful pilots are completed. The chances of success increase when management actively encourages feedback from users and incorporates it to give them a sense of ownership in the process. About the author(s) Boris Ewenstein is a principal in McKinsey's Johannesburg office, where Wesley Smith is a consultant and Ashvin Sologar is an associate principal.",en,190
19,1461698179,CONTENT SHARED,6044362651232258738,6013226412048763966,4613953821207157764,,,,HTML,http://vocesa.uol.com.br/noticias/acervo/cinco-competencias-comportamentais-para-voce-ser-um-bom-lider.phtml,Cinco competências comportamentais para você ser um bom líder,"escritório | Crédito: pixabay Por que algumas pessoas se tornam bem-sucedidas e outras não? Essa era a pergunta que incomodava Marcelo Veras, professor de planejamento de carreira e presidente da Inova Business School, de Campinas. Para ele, livros, workshops e cursos não eram o suficiente para responder à questão, que ouvia constantemente dos alunos em sala de aula. ""Queria saber o que as pessoas que de fato chegaram ao topo tinham a dizer sobre isso"", afirma. Foi assim que, em julho de 2006, começou uma pesquisa sobre o assunto. Procurou pessoas em posições importantes de liderança, como diretores nacionais, vice-presidentes e presidentes para fazer uma pergunta simples: ""Quais competências o trouxeram até aqui e como você definiria cada uma delas?"". Foram mais de 170 entrevistados desde então. A partir das respostas, Marcelo reuniu uma lista das principais habilidades apontadas pelos bem-sucedidos. Elas são divididas em três categorias: comportamentais (como agimos em relação a nós mesmos e às pessoas); técnicas (domínio da área de atuação e de competências básicas de linguagem e leitura); e de gestão, que, claro, têm a ver com nossa atitude na condição de líderes de pessoas e de negócios. Marcelo compara essas competências a um macarrão à bolonhesa. As competências técnicas são o espaguete, as comportamentais, o molho e o resultado final, as competências de gestão, são o macarrão à bolonhesa. ""No curto prazo, ter apenas algumas competências funciona, mas, no fim, só uma combinação sólida é que mantém os líderes em seus cargos"", diz. Ou seja, as habilidades fazem mais sentido quando combinadas entre si e usadas de forma coerente. E, claro, dificilmente alguém terá todas elas superdesenvolvidas, mas criará um conjunto sólido delas - a sua própria receita. ""Querer desenvolver todas as competências no mesmo grau é utopia"", diz Adriana Prates, presidente da Dasein Executive Search, consultoria de recrutamento, de Belo Horizonte. ""As pessoas são diferentes e vão se destacar por diferentes motivos."" O segredo é identificar quais são as mais importantes para você. Ter essa clareza nem sempre é fácil, até porque envolve aceitar as limitações que temos, além de um conhecimento aprofundado de si mesmo. Esse entendimento serve, inclusive, para ver quando vale mais melhorar os pontos fortes e deixar os fracos de lado. Tudo isso demanda saber escutar os outros e receber bem os feedbacks, além de criar o hábito de pensar sobre si mesmo. Para fazer isso, Silvana Mello, diretora da Lee Hecht Harrison, consultoria de transição de carreira, de São Paulo, propõe um exercício de autoanálise baseado em três dimensões. A primeira é tentar definir o que se busca em termos de carreira e vida no longo prazo. A segunda é entender por que você busca esses objetivos e o que motiva suas atitudes. A terceira é pensar como você fará para alcançar esses objetivos e que valores usará para chegar lá. ""Gosto desse modelo de tripé porque ele serve para buscar uma coerência no dia a dia e se obrigar a questionar sempre para onde você está indo e como"", diz Silvana. De fato, um dos principais fatores que determinam o sucesso de uma empreitada é a clareza sobre por que se está fazendo aquilo. Mas, além disso, é preciso olhar para fora e notar como você está se comportando em relação ao meio em que atua. Isso significa prestar atenção ao que está acontecendo e identificar quais as demandas implícitas e explícitas das empresas e de seus colegas. Normalmente, o melhor sinal de que é preciso desenvolver uma competência é quando você percebe que não é (ou não foi) capaz de lidar tão bem quanto gostaria com uma situação. Expor-se a diferentes cenários - dentro ou fora do trabalho - facilita esse aprendizado. ""Saia da rotina de vez em quando para perceber coisas novas"", diz Paula Chimenti, professora do Coppead, escola de negócios da Universidade Federal do Rio de Janeiro. É a melhor forma de perceber o que você ainda precisa melhorar e o que já tem de bom. E ter essa percepção é o que ajuda na motivação. ""É difícil desenvolver algo se você não sentiu a necessidade"", diz. Por isso, é preciso ter um olhar constantemente voltado à melhoria e ao crescimento pessoal para dar conta de notar seus pontos fortes e fracos. O desenvolvimento de competências não é um processo isolado, mas combinado a diversos fatores: seus objetivos e personalidade, a necessidade dos outros e o meio em que você quer crescer. ""A relação entre competência e o contexto é inseparável"", diz Roberto Aylmer, professor da Fundação Dom Cabral, de Minas Gerais. O que vai diferenciar cada um são as atitudes, ou seja, as competências comportamentais. Já as competências técnicas são obtidas por meio de estudo e aprendizado contínuo. As de gestão são como você combina as anteriores de forma a ser um líder bem-sucedido. A seguir você encontra os cinco ingredientes relacionados com o comportamento que mais levaram as pessoas ao sucesso. ""Você não tem como controlar os problemas, mas pode melhorar a forma como reage a eles"", diz Adriana Prates, da Dasein. Ter autonomia em relação aos sentimentos para escolher como vai se comportar faz parte do equilíbrio emocional. Para chegar a esse ponto, é preciso ser capaz de entender suas próprias emoções - que não devem ser suprimidas ou ignoradas, mas geridas. Assistir a si mesmo no dia a dia e perceber como você se sente e quais tipos de situação trazem determinadas reações é uma forma de melhorar essa habilidade. Saber, por exemplo, que você tende a ficar alterado com um tipo de cenário pode ajudá-lo a resolver o que causa aquilo e a monitorar ocasiões futuras. A resposta pode ser desde encontrar válvulas de escape, como um hobby, até fazer terapia ou mudar o ponto de vista. Se for difícil perceber onde estão seus pontos frágeis, peça a opinião de pessoas em quem você confia. ""É como exercício físico, não dá para fazer um tempo e depois parar"", diz Adriana. ""Ser flexível é aceitar o desconhecido"", diz Silvana Mello, da Lee Hecht Harrison. Sair da zona de conforto é difícil, mas essencial para ter flexibilidade para encarar coisas novas e mudar de ideia. ""Tenha em mente que sempre podemos crescer mais, e que para isso precisamos conhecer o novo"", afirma. Fora do trabalho, vale desenvolver essa característica sempre que possível, se colocando em situações diferentes. A experiência diversificada, aliás, o ajudará a perceber quando você deve ser mais firme e quando deve mudar de ideia. Ser humilde em relação ao quanto você mesmo sabe sobre as coisas é importante. ""Hoje as pessoas estão muito mimadas e pouco flexíveis"", diz Adriana. ""Essa é com certeza uma competência que fará toda diferença nas empresas."" Mostre essa habilidade tendo abertura a opiniões diferentes das suas e mantendo o debate focado em ideias, e não em pessoas. O objetivo deve ser conseguir o melhor para todos - e não ter razão sempre. 3. Comprometimento e Execução Dificilmente uma pessoa que deixa tarefas para a última hora e não consegue pensar nos resultados chegará ao topo. Mas, muitas vezes, é difícil manter um desempenho consistente, porque isso exige clareza sobre seus objetivos. ""Quando você vê no trabalho um meio para atingir um fim, é mais fácil encontrar o comprometimento"", diz Adriana. Se você não cumpre seus prazos com a eficiência e rapidez que deveria, reavalie o que o impede de se envolver com aquela tarefa. Aplique o mesmo comprometimento na vida pessoal: não se atrase para encontros e cumpra sua palavra. Como qualquer hábito, o senso de urgência funciona melhor quando entra na rotina. 4. Etiqueta pessoal e profissional ""Etiqueta é saber reduzir a dissonância, a diferença entre você e o ambiente"", diz Roberto Aylmer, da Fundação Dom Cabral. ""Quando a pessoa lê o ambiente e adota uma postura e linguagem compatíveis, pode ter uma grande força de integração."" É verdade que as primeiras impressões também têm a ver com a forma como nos portamos. Uma pessoa mais gentil passará uma impressão de maior credibilidade, ao mesmo tempo em que uma pessoa supercompetente mas pouco respeitosa causará uma péssima impressão. O jeito é prestar atenção em quem é admirado, estudar regras de etiqueta e, na dúvida, perguntar aos outros sobre qual a maneira apropriada de se vestir e de se comportar em certos ambientes. 5. Relacionamento e Network Saber trabalhar com os outros para um objetivo em comum é requisito básico, não importa a sua posição. Se você não faz ideia de como o que você fala pode ser recebido pelos outros, é mau sinal. ""É necessário entender o impacto que causa nas pessoas e não querer sempre que seu desejo prevaleça"", afirma Márcia Portazio, coordenadora do ESPM Carreiras, de São Paulo. E quem tem boa capacidade de relacionamento não faz discriminação e trata do mesmo modo o estagiário e o presidente - com atenção e respeito. Se você não está convencido sobre isso, pense também que as posições hoje podem rapidamente se inverter. O network precisa ser pensado a partir do que você oferecerá para o outro, e não só do que o outro pode trazer a você. Esta matéria faz parte da reportagem ""20 competências essenciais para você ser um bom líder"" Você S/A | Edição 212 | Março de 2016",pt,184
